<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
  <meta name="generator" content="HTML Tidy for Windows (vers 25 March 2009), see www.w3.org">
  <meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
  <meta name="Author" content="Sergei Kuchin">
  <meta name="GENERATOR" content="Mozilla/4.77 [en] (Win95; U) [Netscape]">
  <meta name="KeyWords" content="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library">

  <title>OTL 4.0, Example 232 (otl_stream::flush() and duplicate rows, Oracle 8,8i,9i)</title>
</head>

<body>
  <center>
    <h1>OTL 4.0, Example 232 (otl_stream::flush() and duplicate rows, Oracle 8,8i,9i)</h1>
  </center>

  <h1>Example 232 (otl_stream::flush() and duplicate rows, Oracle 8,8i,9i)</h1>This example demonstrates a simple INSERT, SELECT and the use of the <a href="otl3_stream_class.htm#flush">otl_stream::flush</a>() function with two parameters for Oracle 8/8i/9i.

  <h2>Source Code</h2>
  <pre>
#include &lt;iostream&gt;<br>using namespace std;<br><br>#include &lt;stdio.h&gt;
</pre>
  <pre>
//#define OTL_ORA8I // Compile OTL 4.0/OCI8<br>#define OTL_ORA8I // Compile OTL 4.0/OCI8i<br>// #define OTL_ORA9I // Compile OTL 4.0/OCI9i<br>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file<br><br><a href="otl3_connect_class.htm">otl_connect</a> db; // connect object<br><br>void insert()<br>// insert rows into table<br>{ <br> <a href="otl3_stream_class.htm">otl_stream</a> o(10, // make the buffer size larger than the actual <br>                  // row set to inserted, so that the stream will not<br>                  // flush the buffer automatically<br>              "insert into test_tab values(:f1&lt;int&gt;,:f2&lt;char[31]&gt;)", <br>                 // SQL statement<br>              db // connect object<br>             );<br><br> o.<a href=
"otl3_stream_class.htm#set_commit">set_commit</a>(0); // set stream's auto-commit to OFF.<br><br> long total_rpc=0; // total "rows processed count"<br> long rpc=0; // rows successfully processed in one flush() call<br> int iters=0; // number of rows to be bypassed<br><br> try{<br>  o&lt;&lt;1&lt;&lt;"Line1"; // Enter one row into the stream<br>  o&lt;&lt;1&lt;&lt;"Line1"; // Enter the same data into the stream<br>                 // and cause a "duplicate key" error.<br>  o&lt;&lt;2&lt;&lt;"Line2"; // Enter one row into the stream<br>  o&lt;&lt;3&lt;&lt;"Line3"; // Enter one row into the stream<br>  o&lt;&lt;4&lt;&lt;"Line4"; // Enter one row into the stream<br>  o&lt;&lt;4&lt;&lt;"Line4"; // Enter the same data into the stream<br>                 // and cause a "duplicate key" error.<br>  o.<a href="otl3_stream_class.htm#flush">flush</a>();<br> }catch(<a href="otl3_exception_class.htm">otl_exception</a>&amp; p){<br>  if(p.code==1){<br>   // ORA-0001: ...duplicate key...<br>    ++iters;<br>    rpc=o.<a href="otl3_stream_class.htm#get_rpc">get_rpc</a>();<br>    total_rpc=rpc;<br>    do{<br>      try{<br>        cout&lt;&lt;"TOTAL_RPC="&lt;&lt;total_rpc&lt;&lt;", RPC="&lt;&lt;rpc&lt;&lt;endl;<br>        o.<a href="otl3_stream_class.htm#flush">flush</a>(total_rpc+iters, // bypass the duplicate row and start<br>                                 // with the rows after that<br>                true // force buffer flushing regardless<br>               );<br>        rpc=0;<br>      }catch(otl_exception&amp; p2){<br>        if(p2.code==1){<br>          // ORA-0001: ... duplicate key ...<br>          ++iters;<br>          rpc=o.<a href="otl3_stream_class.htm#get_rpc">get_rpc</a>();<br>          total_rpc+=rpc;<br>        }else<br>          throw;<br>      }<br>    }while(rpc&gt;0);<br>  }else<br>   throw; // re-throw the exception to the outer catch block.<br> }<br><br> db.<a href="otl3_connect_class.htm#commit">commit</a>(); // commit transaction<br><br>}<br><br>void select()<br>{ <br> <a href="otl3_stream_class.htm">otl_stream</a> i(10, // buffer size<br>              "select * from test_tab",<br>                 // SELECT statement<br>              db // connect object<br>             ); <br>   // create select stream<br> <br> int f1;<br> char f2[31];<br><br> while(!i.eof()){ // while not end-of-data<br>  i&gt;&gt;f1&gt;&gt;f2;<br>  cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;", f2="&lt;&lt;f2&lt;&lt;endl;<br> }<br><br>}<br><br>int main()<br>{<br> <a href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize OCI environment<br> try{<br><br>  db.rlogon("scott/tiger"); // connect to Oracle<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "drop table test_tab",<br>    otl_exception::disabled // disable OTL exceptions<br>   ); // drop table<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "create table test_tab(f1 number, f2 varchar2(30))"<br>    );  // create table<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "create unique index ind001 on test_tab(f1)"<br>    );  // create unique index <br><br>  insert(); // insert records into table<br>  select(); // select records from table<br><br> }<br><br> catch(<a href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br> }<br><br> db.logoff(); // disconnect from Oracle<br><br> return 0;<br><br>}
</pre>

  <h2>Output</h2>
  <pre>
TOTAL_RPC=1, RPC=1<br>TOTAL_RPC=4, RPC=3<br>f1=1, f2=Line1<br>f1=2, f2=Line2<br>f1=3, f2=Line3<br>f1=4, f2=Line4<br><br><br>
</pre>
  <hr width="100%">

  <center>
    <a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a><a href="home.htm">Go Home</a>
  </center>

  <p>Copyright &copy; 1996-2009, Sergei Kuchin, email: <a href="mailto:skuchin@aceweb.com">skuchin@aceweb.com</a>, <a href="mailto:skuchin@gmail.com">skuchin@gmail.com</a> <script language="JavaScript" type="text/javascript">
<!-- hide from old browsers
  var modDate = new Date(document.lastModified)
  document.write("<i> Last Updated:<\/i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
  //-->
  </script></p>

  <p><i>Permission to use, copy, modify and redistribute this document for any purpose is hereby granted without fee, provided that the above copyright notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</i></p><script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script><script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
  pageTracker._trackPageview();
  </script>
</body>
</html>
