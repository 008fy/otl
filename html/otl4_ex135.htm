<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
  <meta name="generator" content="HTML Tidy for Windows (vers 25 March 2009), see www.w3.org">
  <meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
  <meta name="Author" content="Sergei Kuchin">
  <meta name="GENERATOR" content="Mozilla/4.77 [en] (Win95; U) [Netscape]">
  <meta name="KeyWords" content="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library">

  <title>OTL 4.0, Example 135 (otl_datetime container and DATE/TIME/TIMESTAMP table containers)</title>
</head>

<body>
  <center>
    <h1>OTL 4.0, Example 135 (otl_datetime container and DATE/TIME/TIMESTAMP table columns)</h1>
  </center>

  <h1>Example 135 (otl_datetime container and DATE/TIME/TIMESTAMP table columns)</h1>This example demonstrates simple INSERT/SELECT with DATEs/TIMEs/TIMESTAMPs and <a href="otl3_stream_class.htm#otl_datetime">otl_datetime</a>. In the case of a DATE field, time componets of the otl_datetime are 0s. In the case of a TIME field, the date componets of the otl_datetime are 1/1/1900, because the default constructor of the otl_datetime default the date components&nbsp; to the date of 1/1/1900.

  <h2>Source Code</h2>
  <pre>
#include &lt;iostream&gt;<br>using namespace std;<br><br>#include &lt;stdio.h&gt;
</pre>
  <pre>
#define OTL_ODBC // Compile OTL 4.0/ FireBird Database ODBC<br>// #define OTL_ODBC_UNIX // uncomment this line if UnixODBC is used<br>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file<br><br><br><a href="otl3_connect_class.htm">otl_connect</a> db; // connect object<br><br>void insert(void)<br>// insert rows into table<br>{ <br> <a href="otl3_stream_class.htm">otl_stream</a> o(1, // stream buffer size should be == to 1 on INSERT<br>              "insert into test_tab "<br>              "values(:f1&lt;int&gt;,:f2&lt;<a href="otl3_bind_variables.htm#timestamp">timestamp</a>&gt;, "<br>              "       :f3&lt;<a href="otl3_bind_variables.htm#timestamp">timestamp</a>&gt;,:f4&lt;<a href=
"otl3_bind_variables.htm#timestamp">timestamp</a>&gt;)", <br>                 // INSERT statement<br>              db // connect object<br>             );<br><br> <a href=
"otl3_stream_class.htm#otl_datetime">otl_datetime</a> tm;<br><br> for(int i=1;i&lt;=10;++i){<br>  tm.year=1998;<br>  tm.month=10;<br>  tm.day=19;<br>  tm.hour=23;<br>  tm.minute=12;<br>  tm.second=12;<br>  o&lt;&lt;i&lt;&lt;tm&lt;&lt;tm&lt;&lt;tm;<br> }<br>}<br><br>void select(void)<br>{ <br> otl_stream i(5, // stream buffer size can be &gt; great 1 on SELECT.<br>              "select * from test_tab",<br>                 // SELECT statement<br>              db // connect object<br>             ); <br> <br> int f1;<br> otl_datetime f2,f3,f4;<br><br> while(!i.eof()){ // while not end-of-data<br>  i&gt;&gt;f1&gt;&gt;f2&gt;&gt;f3&gt;&gt;f4;<br>  cout&lt;&lt;"f1="&lt;&lt;f1;<br>  cout&lt;&lt;", f2="&lt;&lt;f2.month&lt;&lt;"/"&lt;&lt;f2.day&lt;&lt;"/"<br>      &lt;&lt;f2.year&lt;&lt;" "&lt;&lt;f2.hour&lt;&lt;":"&lt;&lt;f2.minute&lt;&lt;":"<br>      &lt;&lt;f2.second;<br>  cout&lt;&lt;", f3="&lt;&lt;f3.month&lt;&lt;"/"&lt;&lt;f3.day&lt;&lt;"/"<br>      &lt;&lt;f3.year&lt;&lt;" "&lt;&lt;f3.hour&lt;&lt;":"&lt;&lt;f3.minute&lt;&lt;":"<br>      &lt;&lt;f3.second;<br>  cout&lt;&lt;", f4="&lt;&lt;f4.month&lt;&lt;"/"&lt;&lt;f4.day&lt;&lt;"/"<br>      &lt;&lt;f4.year&lt;&lt;" "&lt;&lt;f4.hour&lt;&lt;":"&lt;&lt;f4.minute&lt;&lt;":"<br>      &lt;&lt;f4.second;<br>  cout&lt;&lt;endl;<br> }<br> <br>}
</pre>
  <pre>
int main()<br>{<br> <a href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize ODBC environment<br> try{<br><br>  db.rlogon("UID=scott;PWD=tiger;DSN=ib6sql"); // connect to ODBC<br>//  db.rlogon("scott/tiger@ib6sql"); // connect to ODBC, alternative format<br>                                    // of connect string<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "drop table test_tab",<br>    otl_exception::disabled // disable OTL exceptions<br>   ); // drop table<br><br>  <a href=
"otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "create table test_tab(f1 int, f2 date, f3 time, f4 timestamp)"<br>    );  // create table<br><br>  db.commit(); // committing the create table statement to to the database<br><br>  insert(); // insert records into table<br>  select(); // select records from table<br><br> }<br><br> catch(<a href=
"otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>  cerr&lt;&lt;p.sqlstate&lt;&lt;endl; // print out SQLSTATE message<br>  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br> }<br><br> db.logoff(); // disconnect from ODBC<br><br> return 0;<br><br>}
</pre>

  <h2>Output</h2>
  <pre>
f1=1, f2=10/19/1998 0:0:0, f3=1/0/1900 23:12:12, f4=10/19/1998 23:12:12<br>f1=2, f2=10/19/1998 0:0:0, f3=1/0/1900 23:12:12, f4=10/19/1998 23:12:12<br>f1=3, f2=10/19/1998 0:0:0, f3=1/0/1900 23:12:12, f4=10/19/1998 23:12:12<br>f1=4, f2=10/19/1998 0:0:0, f3=1/0/1900 23:12:12, f4=10/19/1998 23:12:12<br>f1=5, f2=10/19/1998 0:0:0, f3=1/0/1900 23:12:12, f4=10/19/1998 23:12:12<br>f1=6, f2=10/19/1998 0:0:0, f3=1/0/1900 23:12:12, f4=10/19/1998 23:12:12<br>f1=7, f2=10/19/1998 0:0:0, f3=1/0/1900 23:12:12, f4=10/19/1998 23:12:12<br>f1=8, f2=10/19/1998 0:0:0, f3=1/0/1900 23:12:12, f4=10/19/1998 23:12:12<br>f1=9, f2=10/19/1998 0:0:0, f3=1/0/1900 23:12:12, f4=10/19/1998 23:12:12<br>f1=10, f2=10/19/1998 0:0:0, f3=1/0/1900 23:12:12, f4=10/19/1998 23:12:12<br><br><br><br>
</pre>
  <hr width="100%">

  <center>
    <a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a><a href="home.htm">Go Home</a>
  </center>

  <p>Copyright &copy; 1996-2009, Sergei Kuchin, email: <a href="mailto:skuchin@aceweb.com">skuchin@aceweb.com</a>, <a href="mailto:skuchin@gmail.com">skuchin@gmail.com <script language="JavaScript" type="text/javascript">
<!-- hide from old browsers
  var modDate = new Date(document.lastModified)
  document.write("<i> Last Updated:<\/i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
  //-->
  </script></a>.</p>

  <p><i>Permission to use, copy, modify and redistribute this document for any purpose is hereby granted without fee, provided that the above copyright notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</i></p><script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script><script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
  pageTracker._trackPageview();
  </script>
</body>
</html>
