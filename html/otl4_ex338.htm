<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
  <meta name="generator" content="HTML Tidy for Windows (vers 25 March 2009), see www.w3.org">
  <meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
  <meta name="Author" content="Sergei Kuchin">
  <meta name="GENERATOR" content="Mozilla/4.75 [en] (Win98; U) [Netscape]">
  <meta name="KeyWords" content="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library">

  <title>OTL 4.0, Example 338 (Insert/Update/Select with LONG BYTE in stream mode and otl_stream_read_iterator)</title>
</head>

<body>
  <center>
    <h1>OTL 4.0, Example 338 (Insert/Update/Select with LONG BYTE in stream mode and otl_stream_read_iterator)</h1>
  </center>This example demonstrates INSERT, UPDATE, and SELECT statements with the MS SQL Server IMAGE datatype in the <a href="otl3_lob_stream.htm">stream mode</a> and <a href="otl4_stream_read_iterator.htm">otl_stream_read_iterator</a>.<br>

  <h2>Source Code</h2>
  <pre>
#include &lt;iostream&gt;<br>using namespace std;<br><br>#include &lt;stdio.h&gt;
</pre>
  <pre>
#define OTL_ODBC // Compile OTL 4.0/ODBC<br>#define <a href="otl3_compile.htm#OTL_STREAM_READ_ITERATOR_ON">OTL_STREAM_READ_ITERATOR_ON</a><br>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file<br><br><a href="otl3_connect_class.htm">otl_connect</a> db; // connect object<br><br>void insert()<br>// insert rows into table<br>{<a href="otl3_long_string.htm">otl_long_string</a> f2(6000); // define long string variable<br> <a href="otl3_stream_class.htm">otl_stream</a> o; // defined an otl_stream variable<br> o.<a href="otl3_stream_class.htm#set_lob_stream_mode">set_lob_stream_mode</a>(true); // set the "lob stream mode" flag<br> o.<a href=
"otl3_stream_class.htm#open">open</a>(1, // buffer size has to be set to 1 for operations with LOBs<br>        "insert into test_tab values(:f1&lt;int&gt;,:f2&lt;raw_long&gt;, "<br>        ":f3&lt;raw_long&gt;) ",<br>            // SQL statement<br>        db // connect object<br>       );<br> o.<a href="otl3_stream_class.htm#set_commit">set_commit</a>(0); // setting stream "auto-commit" to "off". It is required<br>                  // when LOB stream mode is used.
</pre>
  <pre>
 int i,j;<br> <a href="otl3_lob_stream.htm">otl_lob_stream</a> lob; // LOB stream for reading/writing unlimited number<br>                     // of bytes regardless of the buffer size.<br> <a href="otl3_lob_stream.htm">otl_lob_stream</a> lob2; // LOB stream for reading/writing unlimited number<br>                     // of bytes regardless of the buffer size.<br><br> for(i=1;i&lt;=20;++i){<br>  o&lt;&lt;i;<br>  o<a href="otl3_stream_class.htm#stream_write_lob">&lt;&lt;</a>lob; // Initialize otl_lob_stream by writing it<br>          // into otl_stream.<br>  o<a href="otl3_stream_class.htm#stream_write_lob">&lt;&lt;</a>lob2; // Initialize otl_lob_stream by writing it<br>          // into otl_stream.<br><br>  for(j=0;j&lt;5000;++j)<br>   f2[j]='*';<br>  f2[5000]='?';<br>  f2.<a href=
"otl3_long_string.htm#set_len">set_len</a>(5001);<br><br>  lob.<a href="otl3_lob_stream.htm#set_len">set_len</a>(5001+2123); // setting the total  size of<br>                          // the IMAGE to be written.<br>  <br>  lob<a href="otl3_lob_stream.htm#write">&lt;&lt;</a>f2; // writing first chunk of the IMAGE into lob<br><br><br>  f2[2122]='?';<br>  f2.set_len(2123); // setting the size of the second chunk<br><br>  lob&lt;&lt;f2; // writing the second chunk of the IMAGE into lob<br>  lob.<a href="otl3_lob_stream.htm">close</a>(); // closing the otl_lob_stream<br><br>  for(j=0;j&lt;5000;++j)<br>   f2[j]='*';<br>  f2[5000]='?';<br>  f2.<a href="otl3_long_string.htm#set_len">set_len</a>(5001);<br>  lob2.<a href=
"otl3_lob_stream.htm#set_len">set_len</a>(5001+2123); // setting the total  size of<br>                          // the IMAGE to be written.<br>  <br>  lob2<a href="otl3_lob_stream.htm#write">&lt;&lt;</a>f2; // writing first chunk of the IMAGE into lob<br><br>  f2[2122]='?';<br>  f2.set_len(2123); // setting the size of the second chunk<br><br>  lob2&lt;&lt;f2; // writing the second chunk of the IMAGE into lob<br>  lob2.<a href="otl3_lob_stream.htm">close</a>(); // closing the otl_lob_stream<br><br> }<br><br> db.commit(); // committing transaction.<br>}
</pre>
  <pre>
void update()<br>// insert rows in table<br>{
</pre>
  <pre>
 <a href="otl3_long_string.htm">otl_long_string</a> f2(6200); // define long string variable<br><br> <a href="otl3_stream_class.htm">otl_stream</a> o; // defined an otl_stream variable<br> o.<a href="otl3_stream_class.htm#set_lob_stream_mode">set_lob_stream_mode</a>(true); // set the "lob stream mode" flag<br> o.<a href="otl3_stream_class.htm#open">open</a>(1, // buffer size has to be set to 1 for operations with LOBs<br>              "update test_tab "<br>              "   set f2=:f2&lt;raw_long&gt; "<br>              "where f1=:f1&lt;int&gt; ",<br>                 // SQL statement<br>              db // connect object<br>             );<br><br>  <a href="otl3_lob_stream.htm">otl_lob_stream</a> lob;<br><br>  o.<a href=
"otl3_stream_class.htm#set_commit">set_commit</a>(0); // setting stream "auto-commit" to "off". <br><br><br> for(int j=0;j&lt;6000;++j){<br>  f2[j]='#';<br> }<br><br> f2[6000]='?';<br> f2.<a href="otl3_long_string.htm#set_len">set_len</a>(6001);<br><br> o<a href="otl3_stream_class.htm#stream_write_lob">&lt;&lt;</a>lob; // Initialize otl_lob_stream by writing it<br>         // into otl_stream.<br> o&lt;&lt;5;<br><br> lob.<a href="otl3_lob_stream.htm#set_len">set_len</a>(6001*4); // setting the total size of of the IMAGE to be written<br> for(int i=1;i&lt;=4;++i)<br>  lob<a href="otl3_lob_stream.htm#write">&lt;&lt;</a>f2; // writing chunks of the IMAGE into the otl_lob_stream<br><br> lob.<a href=
"otl3_lob_stream.htm#close">close</a>(); // closing the otl_lob_stream<br><br> db.commit(); // committing transaction<br><br>}<br><br>void select()<br>{ <br> <a href="otl3_long_string.htm">otl_long_string</a> f2(3000); // define long string variable<br> <br> <a href="otl3_stream_class.htm">otl_stream</a> i;<br> i.<a href="otl3_stream_class.htm#set_lob_stream_mode">set_lob_stream_mode</a>(true); // set the "lob stream mode" flag<br> i.open(1, // buffer size. To read IMAGE, it needs to be set to 1.<br>        "select * from test_tab where f1&gt;=:f11&lt;int&gt; and f1&lt;=:f12&lt;int&gt;*2",<br>           // SELECT statement<br>         db // connect object<br>        ); <br>   // create select stream<br> <br> int f1;<br> <a href=
"otl3_lob_stream.htm">otl_lob_stream</a>* lob; // Pointer to Stream for reading IMAGE<br> <a href="otl3_lob_stream.htm">otl_lob_stream</a>* lob2; // Pointer to Stream for reading IMAGE<br><br> <a href="otl4_stream_read_iterator.htm">otl_stream_read_iterator</a>&lt;<a href="otl3_stream_class.htm">otl_stream</a>,<a href="otl3_exception_class.htm">otl_exception,</a><a href="otl3_lob_stream.htm">otl_lob_stream</a>&gt; rs;<br> rs.<a href="otl4_stream_read_iterator.htm#attach">attach</a>(i); // attach the iterator "rs" to the stream "i".<br><br><br> i&lt;&lt;4&lt;&lt;4; // assigning :f11 = 4, :f12 = 4<br>   // SELECT automatically executes when all input variables are<br>   // assigned. First portion of output rows is fetched to the buffer<br><br> while(rs.<a href=
"otl4_stream_read_iterator.htm#next_row">next_row</a>()){ // while not end-of-data<br>  rs.<a href="otl4_stream_read_iterator.htm#get_functions">get</a>(1,f1);<br>  cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;endl;<br>  rs.<a href="otl4_stream_read_iterator.htm#get_lob_stream_ptr">get</a>(2,lob); // get pointer to LOB stream<br>  rs.<a href="otl4_stream_read_iterator.htm#get_lob_stream_ptr">get</a>(3,lob2); // get pointer to LOB stream<br>  int n=0;<br>  while(!lob-&gt;<a href="otl3_lob_stream.htm#eof">eof</a>()){ // read while not "end-of-file" -- end of IMAGE<br>   ++n;<br>   (*lob)<a href=
"otl3_lob_stream.htm#read">&gt;&gt;</a>f2; // reading a chunk of IMAGE<br>   cout&lt;&lt;"   chunk #"&lt;&lt;n;<br>   cout&lt;&lt;", f2="&lt;&lt;f2[0]&lt;&lt;f2[f2.len()-1]&lt;&lt;", len="&lt;&lt;f2.len()&lt;&lt;endl;<br>  }<br>  lob-&gt;<a href="otl3_lob_stream.htm#close">close</a>(); // closing the otl_lob_stream.<br>  n=0;<br>  while(!lob2-&gt;<a href="otl3_lob_stream.htm#eof">eof</a>()){ // read while not "end-of-file" -- end of IMAGE<br>   ++n;<br>   (*lob2)<a href="otl3_lob_stream.htm#read">&gt;&gt;</a>f2; // reading a chunk of IMAGE<br>   cout&lt;&lt;"   chunk #"&lt;&lt;n;<br>   cout&lt;&lt;", f3="&lt;&lt;f2[0]&lt;&lt;f2[f2.len()-1]&lt;&lt;", len="&lt;&lt;f2.len()&lt;&lt;endl;<br>  }<br>  lob2-&gt;<a href=
"otl3_lob_stream.htm#close">close</a>(); // closing the otl_lob_stream. <br>  <br> }<br><br>}<br><br><br>int main()<br>{<br> <a href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize the environment<br> try{<br><br>  db.rlogon("scott/tiger@sapdbsql"); // connect to the database<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "drop table test_tab",<br>    otl_exception::disabled // disable OTL exceptions<br>   ); // drop table<br><br>  <a href=
"otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "create table test_tab(f1 int, f2 long byte, f3 long byte)"<br>    );  // create table<br><br>  insert(); // insert records into table<br>  update(); // update records in table<br>  select(); // select records from table<br><br> }<br><br> catch(<a href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>  cerr&lt;&lt;p.sqlstate&lt;&lt;endl; // print out SQLSTATE <br>  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br> }<br><br> db.logoff(); // disconnect from the database<br><br> return 0;<br><br>}
</pre>

  <h2>Output</h2>
  <pre>
f1=4<br>   chunk #1, f2=**, len=3000<br>   chunk #2, f2=**, len=3000<br>   chunk #3, f2=*?, len=1124<br>   chunk #1, f3=**, len=3000<br>   chunk #2, f3=**, len=3000<br>   chunk #3, f3=*?, len=1124<br>f1=5<br>   chunk #1, f2=##, len=3000<br>   chunk #2, f2=##, len=3000<br>   chunk #3, f2=?#, len=3000<br>   chunk #4, f2=##, len=3000<br>   chunk #5, f2=##, len=3000<br>   chunk #6, f2=##, len=3000<br>   chunk #7, f2=##, len=3000<br>   chunk #8, f2=##, len=3000<br>   chunk #9, f2=#?, len=4<br>   chunk #1, f3=**, len=3000<br>   chunk #2, f3=**, len=3000<br>   chunk #3, f3=*?, len=1124<br>f1=6<br>   chunk #1, f2=**, len=3000<br>   chunk #2, f2=**, len=3000<br>   chunk #3, f2=*?, len=1124<br>   chunk #1, f3=**, len=3000<br>   chunk #2, f3=**, len=3000<br>   chunk #3, f3=*?, len=1124<br>f1=7<br>   chunk #1, f2=**, len=3000<br>   chunk #2, f2=**, len=3000<br>   chunk #3, f2=*?, len=1124<br>   chunk #1, f3=**, len=3000<br>   chunk #2, f3=**, len=3000<br>   chunk #3, f3=*?, len=1124<br>f1=8<br>   chunk #1, f2=**, len=3000<br>   chunk #2, f2=**, len=3000<br>   chunk #3, f2=*?, len=1124<br>   chunk #1, f3=**, len=3000<br>   chunk #2, f3=**, len=3000<br>   chunk #3, f3=*?, len=1124<br>
</pre>
  <hr width="100%">

  <center>
    <a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a><a href="home.htm">Go Home</a>
  </center>

  <p>Copyright &copy; 1996-2009, Sergei Kuchin, email: <a href="mailto:skuchin@aceweb.com">skuchin@aceweb.com</a>, <a href="mailto:skuchin@gmail.com">skuchin@gmail.com <script language="JavaScript" type="text/javascript">
<!-- hide from old browsers
  var modDate = new Date(document.lastModified)
  document.write("<i> Last Updated:<\/i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
  //-->
  </script></a>.</p>

  <p><i>Permission to use, copy, modify and redistribute this document for any purpose is hereby granted without fee, provided that the above copyright notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</i></p><script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script><script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
  pageTracker._trackPageview();
  </script>
</body>
</html>
