<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
  <meta name="generator" content="HTML Tidy for Windows (vers 25 March 2009), see www.w3.org">
  <meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
  <meta name="Author" content="Sergei Kuchin">
  <meta name="GENERATOR" content="Mozilla/4.77 [en] (Win95; U) [Netscape]">
  <meta name="KeyWords" content="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library">

  <title>OTL 4.0, Example 198 (Unicode, VARCHAR2 and otl_refcur_stream)</title>
</head>

<body>
  <center>
    <h1>OTL 4.0, Example 198 (Unicode, VARCHAR2, and otl_refcur_stream)</h1>
  </center>

  <h1>Example 198 (Unicode, VARCHAR2, and otl_refcur_stream)</h1>

  <h2>Source Code</h2>
  <pre>
#include &lt;iostream&gt;<br>using namespace std;<br><br>#include &lt;stdio.h&gt;
</pre>
  <pre>
#define OTL_ORA9I // Compile OTL 4.0/OCI9i<br>#define <a href="otl3_compile.htm#OTL_UNICODE">OTL_UNICODE</a> // Enable Unicode OTL for OCI9i<br>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file<br><br><a href="otl3_connect_class.htm">otl_connect</a> db; // connect object<br><br>void insert()<br>// insert rows into table<br>{ <br> <a href=
"otl3_stream_class.htm">otl_stream</a> o(50, // buffer size<br>              "insert into test_tab values(:f1&lt;float&gt;,:f2&lt;char[31]&gt;)", <br>                 // SQL statement<br>              db // connect object<br>             );<br> char tmp[32];<br> unsigned short tmp2[32]; // Null terminated Unicode character array.<br><br> for(int i=1;i&lt;=100;++i){<br>  sprintf(tmp,"Name%d",i);<br>  unsigned short* c2=tmp2;<br>  char* c1=tmp;<br>// Unicode's first 128 characters are ASCII (0..127), so<br>// all is needed for converting ASCII into Unicode is as follows:<br>  while(*c1){<br>   *c2=(unsigned char)*c1;<br>   ++c1; ++c2;   <br>  }  <br>  *c2=0; // target Unicode string is null terminated,<br>         // only the null terminator is a two-byte character, <br>         // not one-byte<br>  o&lt;&lt;(float)i;<br>  o<a href="otl3_stream_class.htm#unicode_unsigned_char_write">&lt;&lt;</a>(unsigned char*)tmp2; <br>   // overloaded operator&lt;&lt;(const unsigned char*) in the case of Unicode<br>   // OTL accepts a pointer to a Unicode character array.<br>   // operator&lt;&lt;(const unsigned short*) wasn't overloaded<br>   // in order to avoid ambiguity in C++ type casting.<br> }<br><br>}<br><br>void select()<br>{ <br> <a href="otl3_stream_class.htm">otl_stream</a> i(1, // buffer size<br>              "begin "<br>              " open <b>:cur&lt;refcur,out[50]&gt; </b>for "<br>     // :cur is a bind variable name, refcur -- its type, <br>     // out -- output parameter, 50 -- the buffer size when this<br>     // reference cursor will be attached to <a href="otl4_refcur_stream.htm">otl_refcur_stream<br></a>              "  select * "<br>              "  from test_tab "<br>              "  where f1&gt;=:f&lt;int,in&gt; and f1&lt;=:f*2; "<br>              "end;", // PL/SQL block returns a referenced cursor<br>              db // connect object<br>             ); <br>   // create select stream with referenced cursor<br><br>  i.set_commit(0); // set stream "auto-commit" to OFF.<br> <br> float f1;<br> unsigned short f2[32];<br><br> <a href="otl4_refcur_stream.htm">otl_refcur_stream</a> s; // reference cursor stream for reading rows.<br><br> i&lt;&lt;8; // assigning :f = 8<br> i<a href="otl3_stream_class.htm#stream_read_refcur">&gt;&gt;</a>s; // initializing the refrence cursor stream with the output <br>       // reference cursor.<br><br> while(!s.eof()){ // while not end-of-data<br>  s&gt;&gt;f1;<br>  s<a href="otl3_stream_class.htm#unicode_unsigned_read">&gt;&gt;</a>(unsigned char*)f2;<br>    // overloaded operator&gt;&gt;(unsigned char*) in the case of Unicode<br>    // OTL accepts a pointer to a Unicode chracter array.<br>    // operator&gt;&gt;(unsigned short*) wasn't overloaded <br>    // in order to avoid ambiguity in C++ type casting.<br>  cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;", f2=";<br>// Unicode's first 128 characters are ASCII, so in order<br>// to convert Unicode back to ASCII all is needed is<br>// as follows:<br>   for(int j=0;f2[j]!=0;++j){<br>     cout&lt;&lt;(char)f2[j];<br>   }<br>   cout&lt;&lt;endl;<br> }<br><br> s.close(); // closing the reference cursor<br><br> i&lt;&lt;4; // assigning :f = 4<br> i&gt;&gt;s;<br><br> while(!s.eof()){ // while not end-of-data<br>  s&gt;&gt;f1;<br>  s<a href="otl3_stream_class.htm#unicode_unsigned_read">&gt;&gt;</a>(unsigned char*)f2;<br>    // overloaded operator&gt;&gt;(unsigned char*) in the case of Unicode<br>    // OTL accepts a pointer to a Unicode chracter array.<br>    // operator&gt;&gt;(unsigned short*) wasn't overloaded <br>    // in order to avoid ambiguity in C++ type casting.<br>  cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;", f2=";<br>// Unicode's first 128 characters are ASCII, so in order<br>// to convert Unicode back to ASCII all is needed is<br>// as follows:<br>   for(int j=0;f2[j]!=0;++j){<br>     cout&lt;&lt;(char)f2[j];<br>   }<br>   cout&lt;&lt;endl;<br> }<br><br> // there is no need to explicitly calls s.close() since s's destructor <br> // will take care of closing the stream<br>}<br><br>int main()<br>{<br> <a href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize OCI environment<br> try{<br><br>  db.rlogon("scott/tiger"); // connect to Oracle<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "drop table test_tab",<br>    otl_exception::disabled // disable OTL exceptions<br>   ); // drop table<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "create table test_tab(f1 number, f2 varchar2(30))"<br>    );  // create table<br><br>  insert(); // insert records into table<br>  select(); // select records from table<br><br> }<br><br> catch(<a href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br> }<br><br> db.logoff(); // disconnect from Oracle<br><br> return 0;<br><br>}
</pre>

  <h2>Output</h2>
  <pre>
f1=8, f2=Name8<br>f1=9, f2=Name9<br>f1=10, f2=Name10<br>f1=11, f2=Name11<br>f1=12, f2=Name12<br>f1=13, f2=Name13<br>f1=14, f2=Name14<br>f1=15, f2=Name15<br>f1=16, f2=Name16<br>f1=4, f2=Name4<br>f1=5, f2=Name5<br>f1=6, f2=Name6<br>f1=7, f2=Name7<br>f1=8, f2=Name8<br><br><br>
</pre>
  <hr width="100%">

  <center>
    <a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a><a href="home.htm">Go Home</a>
  </center>

  <p>Copyright &copy; 1996-2009, Sergei Kuchin, email: <a href="mailto:skuchin@aceweb.com">skuchin@aceweb.com</a>, <a href="mailto:skuchin@gmail.com">skuchin@gmail.com <script language="JavaScript" type="text/javascript">
<!-- hide from old browsers
  var modDate = new Date(document.lastModified)
  document.write("<i> Last Updated:<\/i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
  //-->
  </script></a>.</p>

  <p><i>Permission to use, copy, modify and redistribute this document for any purpose is hereby granted without fee, provided that the above copyright notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</i></p><script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script><script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
  pageTracker._trackPageview();
  </script>
</body>
</html>
