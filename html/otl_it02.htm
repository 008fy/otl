<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>
<head>
  <meta name="generator" content="HTML Tidy for Windows (vers 25 March 2009), see www.w3.org">

  <title>otl_input_iterator&lt;T, Distance&gt;</title>
  <meta name="GENERATOR" content="Mozilla/3.03Gold (Win95; I) [Netscape]">
</head>

<body>
  <p><!--
  ==
  == The OCI Template Library 1.0.6.5
  == Standard Template Library (STL) compatible iterator
  == classes based upon the otl_stream class.
  == Copyright (C) Sergei Kuchin, 1996, 1997, 1998
  == Author: Sergei Kuchin
  == This library is free software. Permission to use, copy, 
  == modify and redistribute it for any purpose is hereby granted 
  == without fee, provided that the above copyright notice appear 
  == in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
  == 
  --><br clear="none"></p>

  <h1>otl_input_iterator&lt;T, Distance&gt;</h1>

  <table cellspacing="0" cellpadding="0" width="100%">
    <tr>
      <td align="left"><img src="iterator.gif" alt="" height="38" width="194"></td>

      <td align="right"><img src="type.gif" alt="" height="39" width="194"></td>
    </tr>

    <tr>
      <td align="left" valign="top"><b>Category</b>: iterators</td>

      <td align="right" valign="top"><b>Component type</b>: type</td>
    </tr>
  </table>

  <h3>Description</h3>

  <p>An <tt>otl_input_iterator</tt> is an <a href="http://www.sgi.com/Technology/STL/InputIterator.html">Input Iterator</a> that performs input of objects of type <tt>T</tt> from a particular <a href="otl_1pg.htm#sec22">otl_stream</a>. When end of stream is reached, the <tt>otl_input_iterator</tt> takes on a special <i>end of stream</i> value, which is a past-the-end iterator. Note that all of the restrictions of an <a href="http://www.sgi.com/Technology/STL/InputIterator.html">Input Iterator</a> must be obeyed, including the restrictions on the ordering of <tt>operator*</tt> and <tt>operator++</tt> operations.</p>

  <h3>Definition</h3>

  <p>Defined in <a href="otl_iter.h">otl_iter.h</a>.</p>

  <h3>Template parameters</h3>

  <table border="2">
    <tr>
      <th>Parameter</th>

      <th>Description</th>

      <th>Default</th>
    </tr>

    <tr>
      <td valign="top"><tt>T</tt></td>

      <td valign="top">The <tt>otl_input_iterator</tt>'s value type. <tt>Operator*</tt> returns a <tt>const T&amp;</tt>.</td>

      <td valign="top">&nbsp;</td>
    </tr>

    <tr>
      <td valign="top"><tt>Distance</tt></td>

      <td valign="top">The <tt>otl_input_iterator</tt>'s distance type.</td>

      <td valign="top"><tt>ptrdiff_t</tt></td>
    </tr>
  </table>

  <h3>Model of</h3>

  <p><a href="http://www.sgi.com/Technology/STL/InputIterator.html">Input Iterator</a></p>

  <h3>Type requirements</h3>

  <p>The value type <tt>T</tt> must be a type such that <tt>s &gt;&gt; T</tt> is a valid expression.</p>

  <p>The value type <tt>T</tt> must be a model of <a href="http://www.sgi.com/Technology/STL/DefaultConstructible.html">Default Constructible</a>.</p>

  <p>The distance type must, as described in the <a href="http://www.sgi.com/Technology/STL/InputIterator.html">Input Iterator</a> requirements, be a signed integral type.</p>

  <h3>Public base classes</h3>

  <p>None.</p>

  <h3>Members</h3>

  <table border="2">
    <tr>
      <th>Member</th>

      <th>Where defined</th>

      <th>Description</th>
    </tr>

    <tr>
      <td valign="top"><tt>otl_input_iterator()</tt></td>

      <td valign="top"><tt>otl_input_iterator</tt></td>

      <td valign="top">See below.</td>
    </tr>

    <tr>
      <td valign="top"><tt>otl_input_iterator(otl_stream&amp;)</tt></td>

      <td valign="top"><tt>otl_input_iterator</tt></td>

      <td valign="top">See below.</td>
    </tr>

    <tr>
      <td valign="top"><tt>otl_input_iterator(const otl_input_iterator&amp;)</tt></td>

      <td valign="top"><a href="http://www.sgi.com/Technology/STL/trivial.html">Trivial Iterator</a></td>

      <td valign="top">The copy constructor</td>
    </tr>

    <tr>
      <td valign="top"><tt>otl_input_iterator&amp; operator=(const otl_stream&amp;)</tt></td>

      <td valign="top"><a href="http://www.sgi.com/Technology/STL/trivial.html">Trivial Iterator</a></td>

      <td valign="top">The assignment operator</td>
    </tr>

    <tr>
      <td valign="top"><tt>const T&amp; operator*() const</tt></td>

      <td valign="top"><a href="http://www.sgi.com/Technology/STL/InputIterator.html">Input Iterator</a></td>

      <td valign="top">Returns the next object in the stream.</td>
    </tr>

    <tr>
      <td valign="top"><tt>otl_input_iterator&amp; operator++()</tt></td>

      <td valign="top"><a href="http://www.sgi.com/Technology/STL/InputIterator.html">Input Iterator</a></td>

      <td valign="top">Preincrement.</td>
    </tr>

    <tr>
      <td valign="top"><tt>otl_input_iterator&amp; operator++(int)</tt></td>

      <td valign="top"><a href="http://www.sgi.com/Technology/STL/InputIterator.html">Input Iterator</a></td>

      <td valign="top">Postincrement.</td>
    </tr>

    <tr>
      <td valign="top"><tt>bool operator==(const otl_input_iterator&amp;, const otl_input_iterator&amp;)</tt></td>

      <td valign="top"><a href="http://www.sgi.com/Technology/STL/trivial.html">Trivial iterator</a></td>

      <td valign="top">The equality operator. This is a global function, not a member function.</td>
    </tr>

    <tr>
      <td valign="top"><tt>input_iterator_tag iterator_category(const otl_input_iterator&amp;)</tt></td>

      <td valign="top"><a href="http://www.sgi.com/Technology/STL/iterator_tags.html">iterator tags</a></td>

      <td valign="top">Returns the iterator's category.</td>
    </tr>

    <tr>
      <td valign="top"><tt>T* value_type(const otl_input_iterator&amp;)</tt></td>

      <td valign="top"><a href="http://www.sgi.com/Technology/STL/iterator_tags.html">iterator tags</a></td>

      <td valign="top">Returns the iterator's value type.</td>
    </tr>

    <tr>
      <td valign="top"><tt>Distance* distance_type(const otl_input_iterator&amp;)</tt></td>

      <td valign="top"><a href="http://www.sgi.com/Technology/STL/iterator_tags.html">iterator tags</a></td>

      <td valign="top">Returns the iterator's distance type. &lt;</td>
    </tr>
  </table>

  <h3>New members</h3>

  <p>These members are not defined in the <a href="http://www.sgi.com/Technology/STL/InputIterator.html">Input Iterator</a> requirements, but are specific to <tt>otl_input_iterator</tt>.</p>

  <table border="2">
    <tr>
      <th>Function</th>

      <th>Description</th>
    </tr>

    <tr>
      <td valign="top"><tt>otl_input_iterator()</tt></td>

      <td valign="top">The default constructor: Constructs an end-of-stream iterator. This is a past-the-end iterator, and it is useful when constructing a "range".</td>
    </tr>

    <tr>
      <td valign="top"><tt>otl_input_iterator(otl_stream&amp; s)</tt></td>

      <td valign="top">Creates an <tt>otl_input_iterator</tt> that reads values from the OTL stream <tt>s</tt>. When <tt>s</tt> reaches end of stream, this iterator will compare equal to an end-of-stream iterator created using the default constructor.</td>
    </tr>
  </table>

  <h3>Notes</h3>

  <h3>See also</h3>

  <p><a href="otl_it01.htm">otl_output_iterator</a>, <a href="http://www.sgi.com/Technology/STL/InputIterator.html">Input Iterator</a>, <a href="http://www.sgi.com/Technology/STL/OutputIterator.html">Output Iterator</a>.</p><script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script><script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
  pageTracker._trackPageview();
  </script>
</body>
</html>
