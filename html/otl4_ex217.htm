<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
  <meta name="generator" content="HTML Tidy for Windows (vers 25 March 2009), see www.w3.org">
  <meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
  <meta name="Author" content="Sergei Kuchin">
  <meta name="GENERATOR" content="Mozilla/4.77 [en] (Win95; U) [Netscape]">
  <meta name="KeyWords" content="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library">

  <title>OTL 4.0, Example 217 (otl_stream::cancel() and DB2-CLi)</title>
</head>

<body>
  <center>
    <h1>OTL 4.0, Example 217 (otl_stream::cancel() and DB2-CLI)</h1>
  </center>

  <h1>Example 217 (otl_stream::cancel() and DB2-CLI)</h1>This example demonstrates how to use <a href="otl3_stream_class.htm#cancel">otl_stream::cancel()</a> in OTL/ODBC, OTL/DB2-CLI. The example works in Windows, VC++, only. With small modifications, the example can be ported to Unix, pthreads.

  <h2>Source Code</h2>
  <pre>
#include &lt;iostream&gt;<br>using namespace std;<br><br>#include &lt;stdio.h&gt;<br>#include &lt;windows.h&gt;<br>#include &lt;process.h&gt;
</pre>
  <pre>
#define OTL_DB2_CLI // Compile OTL 4.0/DB2-CLI<br>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file<br><br><a href="otl3_connect_class.htm">otl_connect</a> db; // connect object<br><br>void insert()<br>// insert rows into table<br>{ <br> <a href="otl3_stream_class.htm">otl_stream</a> o(50, // buffer size<br>              "insert into test_tab values(:f1&lt;float&gt;,:f2&lt;char[31]&gt;)", <br>                 // SQL statement<br>              db // connect object<br>             );<br> char tmp[32];<br><br> for(int i=1;i&lt;=100;++i){<br>  sprintf(tmp,"Name%d",i);<br>  o&lt;&lt;(float)i&lt;&lt;tmp;<br> }<br>}<br><br><a href=
"otl3_stream_class.htm">otl_stream</a> s;<br><br>void select(void* dummy_par)<br>{ <br> try{<br><br>  cout&lt;&lt;"Selecting..."&lt;&lt;endl;<br><br>  s.open(1, // buffer size<br>         "select count(*) "<br>         "from test_tab a1, test_tab a2, test_tab a3, "<br>         "     test_tab a4, test_tab a5 "<br>         "where 1=:f1&lt;int&gt;",<br>           // SELECT statement<br>         db // connect object<br>        ); <br>   // Create select stream.<br>   // The ":f1" dummy input parameter is needed to give the stream<br>   // a chance to initialize its internal variables with the SELECT statement<br>   // BEFORE the SELECT statement starts executing<br> <br>  int count;<br><br>  s&lt;&lt;1; // Now, forcing the execution of the SQL<br><br>  while(!s.eof()){ // while not end-of-data<br>   s&gt;&gt;count;<br>   cout&lt;&lt;"count="&lt;&lt;count&lt;&lt;endl;<br>  }<br> }catch(otl_exception&amp; p){<br>  cerr&lt;&lt;"Select() ===&gt; "&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>  cerr&lt;&lt;"Select() ===&gt; "&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>  cerr&lt;&lt;"Select() ===&gt; "&lt;&lt;p.var_info&lt;&lt;endl; // print out the vari }<br> }<br> _endthread();<br>}<br><br>void cancel(void* dummy_par)<br>{ <br> try{<br>   cout&lt;&lt;"Cancelling the SQL"&lt;&lt;endl;<br>   s.<a href="otl3_stream_class.htm#cancel">cancel</a>();<br> }catch(otl_exception&amp; p){<br>   cout&lt;&lt;"Cancel() ===&gt; "&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>   cout&lt;&lt;"Cancel() ===&gt; "&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>   cout&lt;&lt;"Cancel() ===&gt; "&lt;&lt;p.var_info&lt;&lt;endl; // print out the vari }<br> }<br> cout&lt;&lt;"End of Cancelling"&lt;&lt;endl;<br> _endthread();<br><br>}<br><br>int main()<br>{<br> <a href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize the environment<br> try{<br><br>  db.rlogon("scott/tiger@db2sql"); // connect to the database<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "drop table test_tab",<br>    otl_exception::disabled // disable OTL exceptions<br>   ); // drop table<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "create table test_tab(f1 int, f2 varchar(30))"<br>    );  // create table<br><br>  insert(); // insert records into table<br>  _beginthread(select,0,NULL);<br>  Sleep(2000);<br>  _beginthread(cancel,0,NULL);<br>  Sleep(10000);<br>  cout&lt;&lt;"End of program"&lt;&lt;endl;<br> }<br><br> catch(<a href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br> }<br><br> db.logoff(); // disconnect from the database<br><br> return 0;<br><br>}
</pre>

  <h2>Output</h2>
  <pre>
Selecting...<br>Cancelling the SQL<br>End of Cancelling<br>Select() ===&gt;<br>Select() ===&gt; select count(*) from test_tab a1, test_tab a2, test_tab a3,      t<br>est_tab a4, test_tab a5 where 1=?<br>Select() ===&gt;<br>End of program<br><br>
</pre>
  <hr width="100%">

  <center>
    <a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a><a href="home.htm">Go Home</a>
  </center>

  <p>Copyright &copy; 1996-2009, Sergei Kuchin, email: <a href="mailto:skuchin@aceweb.com">skuchin@aceweb.com</a>, <a href="mailto:skuchin@gmail.com">skuchin@gmail.com <script language="JavaScript" type="text/javascript">
<!-- hide from old browsers
  var modDate = new Date(document.lastModified)
  document.write("<i> Last Updated:<\/i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
  //-->
  </script></a>.</p>

  <p><i>Permission to use, copy, modify and redistribute this document for any purpose is hereby granted without fee, provided that the above copyright notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</i></p><script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script><script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
  pageTracker._trackPageview();
  </script>
</body>
</html>
