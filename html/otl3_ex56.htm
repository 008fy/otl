<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>
<head>
  <meta name="generator" content="HTML Tidy for Windows (vers 25 March 2009), see www.w3.org">

  <title>OTL 4.0, Example 56 (Insert/Update/Select with Oracle 8 CLOB in stream mode)</title>
  <meta name="Author" content="Sergei Kuchin">
  <meta name="GENERATOR" content="Mozilla/3.03Gold (Win95; I) [Netscape]">
  <meta name="KeyWords" content="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library">
</head>

<body>
  <h1 align="center">OTL 4.0, Example 56 (Insert/Update/Select with Oracle 8 CLOB in stream mode)</h1>

  <h1>Example 56 (Insert/Update/Select with Oracle 8 CLOB in stream mode)</h1>

  <p>This example demonstrates INSERT, UPDATE, and SELECT statements with the Oracle 8 CLOB datatype in <a href="otl3_lob_stream.htm">stream mode</a>.</p>

  <h2>Source Code</h2>
  <pre>
#include &lt;iostream&gt;
using namespace std;

#include &lt;stdio.h&gt;
</pre>
  <pre>
#define OTL_ORA8 // Compile OTL 4.0/OCI8
#include &lt;otlv4.h&gt; // include the OTL 4.0 header file

<a href="otl3_connect_class.htm">otl_connect</a> db; // connect object

void insert()
// insert rows into table
{<a href="otl3_long_string.htm">otl_long_string</a> f2(60000); // define long string variable
 <a href="otl3_stream_class.htm">otl_stream</a> o(1, // buffer size has to be set to 1 for operations with LOBs
              "insert into test_tab values(:f1&lt;int&gt;,empty_clob()) "
              "returning f2 into :f2&lt;<a href="otl3_bind_variables.htm#clob">clob</a>&gt; ",
                 // SQL statement
              db // connect object
             );
 o.<a href="otl3_stream_class.htm#set_commit">set_commit</a>(0); // setting stream "auto-commit" to "off". It is required
                  // when LOB stream mode is used.

 <a href="otl3_lob_stream.htm">otl_lob_stream</a> lob; // LOB stream for reading/writing unlimited number
                     // of bytes regardless of the buffer size.

 for(int i=1;i&lt;=20;++i){
  for(int j=0;j&lt;50000;++j)
   f2[j]='*';
  f2[50000]='?';
  f2.<a href="otl3_long_string.htm#set_len">set_len</a>(50001);

  o&lt;&lt;i;

  o<a href="otl3_stream_class.htm#stream_write_lob">&lt;&lt;</a>lob; // Initialize otl_lob_stream by writing it
          // into otl_stream. Weird, isn't it?

  lob.<a href="otl3_lob_stream.htm#set_len">set_len</a>(50001+23123); // setting the total  size of
                            // the CLOB to be written.
   // It is required for compatibility
   // with earlier releases of OCI8: OCI8.0.3, OCI8.0.4.
 
  lob<a href="otl3_lob_stream.htm#write">&lt;&lt;</a>f2; // writing first chunk of the CLOB into lob

  f2[23122]='?';
  f2.set_len(23123); // setting the size of the second chunk

  lob&lt;&lt;f2; // writing the second chunk of the CLOB into lob
  lob.<a href="otl3_lob_stream.htm">close</a>(); // closing the otl_lob_stream
 }

 db.commit(); // committing transaction.
}
</pre>
  <pre>
void update()
// insert rows in table
{ 
</pre>
  <pre>
 <a href="otl3_long_string.htm">otl_long_string</a> f2(6200); // define long string variable

 <a href="otl3_stream_class.htm">otl_stream</a> o(1, // buffer size has to be set to 1 for operations with LOBs
              "update test_tab "
              "   set f2=empty_clob() "
              "where f1=:f1&lt;int&gt; "
              "returning f2 into :f2&lt;<a href="otl3_bind_variables.htm#clob">clob</a>&gt; ",
                 // SQL statement
              db // connect object
             );

  <a href="otl3_lob_stream.htm">otl_lob_stream</a> lob;

  o.<a href="otl3_stream_class.htm#set_commit">set_commit</a>(0); // setting stream "auto-commit" to "off". 


 for(int j=0;j&lt;6000;++j){
  f2[j]='#';
 }

 f2[6000]='?';
 f2.<a href="otl3_long_string.htm#set_len">set_len</a>(6001);

 o&lt;&lt;5;
 o<a href="otl3_stream_class.htm#stream_write_lob">&lt;&lt;</a>lob; // Initialize otl_lob_stream by writing it
         // into otl_stream.

 lob.<a href="otl3_lob_stream.htm#set_len">set_len</a>(6001*4); // setting the total size of of the CLOB to be written
 for(int i=1;i&lt;=4;++i)
  lob<a href="otl3_lob_stream.htm#write">&lt;&lt;</a>f2; // writing chunks of the CLOB into the otl_lob_stream

 lob.<a href="otl3_lob_stream.htm#close">close</a>(); // closing the otl_lob_stream

 db.commit(); // committing transaction

}

void select()
{ 
 <a href="otl3_long_string.htm">otl_long_string</a> f2(20000); // define long string variable

 <a href="otl3_stream_class.htm">otl_stream</a> i(10, // buffer size. To read CLOBs, it can be set to a size greater than 1
              "select * from test_tab where f1&gt;=:f&lt;int&gt; and f1&lt;=:f*2",
                 // SELECT statement
              db // connect object
             ); 
   // create select stream
 
 float f1;
 <a href="otl3_lob_stream.htm">otl_lob_stream</a> lob; // Stream for reading CLOB

 i&lt;&lt;4; // assigning :f = 4
   // SELECT automatically executes when all input variables are
   // assigned. First portion of output rows is fetched to the buffer

 while(!i.eof()){ // while not end-of-data
  i&gt;&gt;f1;
  cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;endl;
  i<a href="otl3_stream_class.htm#stream_read_lob">&gt;&gt;</a>lob; // initializing CLOB stream by reading the CLOB reference 
          // into the otl_lob_stream from the otl_stream.
  int n=0;
  while(!lob.<a href="otl3_lob_stream.htm#eof">eof</a>()){ // read while not "end-of-file" -- end of CLOB
   ++n;
   lob<a href="otl3_lob_stream.htm#read">&gt;&gt;</a>f2; // reading a chunk of CLOB
   cout&lt;&lt;"   chunk #"&lt;&lt;n;
   cout&lt;&lt;", f2="&lt;&lt;f2[0]&lt;&lt;f2[f2.len()-1]&lt;&lt;", len="&lt;&lt;f2.len()&lt;&lt;endl;
  }
  lob.<a href="otl3_lob_stream.htm#close">close</a>(); // closing the otl_lob_stream. This step may be skipped.
  
 }

}

int main()
{
 <a href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize OCI environment
 try{

  db.rlogon("scott/tiger"); // connect to Oracle

  <a href="otl3_const_sql.htm">otl_cursor::direct_exec
</a>   (
    db,
    "drop table test_tab",
    otl_exception::disabled // disable OTL exceptions
   ); // drop table

  <a href="otl3_const_sql.htm">otl_cursor::direct_exec
</a>   (
    db,
    "create table test_tab(f1 number, f2 clob)"
    );  // create table

  insert(); // insert records into table
  update(); // update records in table
  select(); // select records from table

 }

 catch(<a href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions
  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message
  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error
  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error
 }

 db.logoff(); // disconnect from Oracle

 return 0;

}
</pre>

  <h2>Output</h2>
  <pre>
f1=4
   chunk #1, f2=**, len=20000
   chunk #2, f2=**, len=20000
   chunk #3, f2=**, len=20000
   chunk #4, f2=*?, len=13124
f1=5
   chunk #1, f2=##, len=20000
   chunk #2, f2=#?, len=4004
f1=6
   chunk #1, f2=**, len=20000
   chunk #2, f2=**, len=20000
   chunk #3, f2=**, len=20000
   chunk #4, f2=*?, len=13124
f1=7
   chunk #1, f2=**, len=20000
   chunk #2, f2=**, len=20000
   chunk #3, f2=**, len=20000
   chunk #4, f2=*?, len=13124
f1=8
   chunk #1, f2=**, len=20000
   chunk #2, f2=**, len=20000
   chunk #3, f2=**, len=20000
   chunk #4, f2=*?, len=13124

</pre>
  <hr width="100%">

  <center>
    <p><a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a> <a href="home.htm">Go Home</a></p>
  </center>

  <p>Copyright &copy; 1996-2009, Sergei Kuchin, email: <a href="mailto:skuchin@aceweb.com">skuchin@aceweb.com</a>, <a href="mailto:skuchin@gmail.com">skuchin@gmail.com</a> <script language="JavaScript" type="text/javascript">
<!-- hide from oldgmailsers
  var modDate = new Date(document.lastModified)
  document.write("<i> Last Updated:<\/i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
  //-->
  </script>.</p>

  <p><i>Permission to use, copy, modify and redistribute this document for any purpose is hereby granted without fee, provided that the above copyright notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</i></p><script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script><script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
  pageTracker._trackPageview();
  </script>
</body>
</html>
