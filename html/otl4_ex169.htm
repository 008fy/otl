<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
  <meta name="generator" content="HTML Tidy for Windows (vers 25 March 2009), see www.w3.org">
  <meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
  <meta name="Author" content="Sergei Kuchin">
  <meta name="GENERATOR" content="Mozilla/4.77 [en] (Win95; U) [Netscape]">
  <meta name="KeyWords" content="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library">

  <title>OTL 4.0, Example 169 (#define's OTL_DEFAULT_XXX_NULL_TO_VAL, Oracle 8/8i/9i)</title>
</head>

<body>
  <center>
    <h1>OTL 4.0, Example 169 (#define's OTL_DEFAULT_XXX_NULL_TO_VAL, Oracle 7/8/8i/9i)</h1>
  </center>

  <h1>Example 169 (#define's OTL_DEFAULT_XXX_NULL_TO_VAL, Oracle 8/8i/9i)</h1>This example demonstrates how to use #define <a href="otl3_compile.htm#OTL_DEFAULT_NUMERIC_NULL_TO_VAL">OTL_DEFAULT_NUMERIC_NULL_TO_VAL,</a><a href="otl3_compile.htm#OTL_DEFAULT_DATETIME_NULL_TO_VAL">OTL_DEFAULT_DATETIME_NULL_TO_VAL</a>, <a href="otl3_compile.htm#OTL_DEFAULT_STRING_NULL_TO_VAL">OTL_DEFAULT_STRING_NULL_TO_VAL,</a><a href="otl3_compile.htm#OTL_DEFAULT_CHAR_NULL_TO_VAL">OTL_DEFAULT_CHAR_NULL_TO_VAL.</a>, which allow the user to default NULLs to some values.

  <h2>Source Code</h2>
  <pre>
#include &lt;iostream&gt;<br>using namespace std;<br><br>#include &lt;stdio.h&gt;
</pre>
  <pre>
#define OTL_ORA8I // Compile OTL 4.0/OCI8i<br>//#define OTL_ORA7 // Uncomment this line to compile OTL 4.0/OCI7<br>//#define OTL_ORA8 // Uncomment this line to compile OTL 4.0/OCI8<br>//#define OTL_ORA9I // Uncomment this line to compile OTL 4.0/OCI9i<br><br>// Default "numeric" NULLs to (-1)<br>#define <a href="otl3_compile.htm#OTL_DEFAULT_NUMERIC_NULL_TO_VAL">OTL_DEFAULT_NUMERIC_NULL_TO_VAL</a> (-1)<br><br>// Default "datetime" NULLs to otl_datetime(2000,1,1,0,0,0)<br>#define <a href="otl3_compile.htm#OTL_DEFAULT_DATETIME_NULL_TO_VAL">OTL_DEFAULT_DATETIME_NULL_TO_VAL</a> otl_datetime(2000,1,1,0,0,0)<br><br>// Default "string" NULLs to "***NULL***"<br>#define <a href=
"otl3_compile.htm#OTL_DEFAULT_STRING_NULL_TO_VAL">OTL_DEFAULT_STRING_NULL_TO_VAL</a> "***NULL***"<br><br>// Default "char" NULLs to '*'<br>#define <a href="otl3_compile.htm#OTL_DEFAULT_CHAR_NULL_TO_VAL">OTL_DEFAULT_CHAR_NULL_TO_VAL</a> '*'<br><br>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file<br><br><a href="otl3_connect_class.htm">otl_connect</a> db; // connect object<br><br>void insert()<br>// insert rows into table<br>{ <br> <a href=
"otl3_stream_class.htm">otl_stream</a> o(50, // buffer size<br>              "insert into test_tab "<br>              "values(:f1&lt;float&gt;,:f2&lt;char[31]&gt;,NULL,:f4&lt;timestamp&gt;)",  <br>                 // SQL statement<br>              db // connect object<br>             );<br> char tmp[32];<br> otl_datetime f4(2001,2,24,13,21,11);<br><br> for(int i=1;i&lt;=100;++i){<br>  sprintf(tmp,"Name%d",i);<br>  if(i==10)<br>   o&lt;&lt;(float)i&lt;&lt;otl_null()&lt;&lt;otl_null();<br>  else<br>   o&lt;&lt;(float)i&lt;&lt;tmp&lt;&lt;f4;<br> }<br><br>}<br><br>void select()<br>{ <br> <a href=
"otl3_stream_class.htm">otl_stream</a> i(50, // buffer size<br>              "select f1,f2,f2 f22,f3,f4 "<br>               "from test_tab "<br>               "where f1&gt;=:f11&lt;int&gt; and f1&lt;=:f12&lt;int&gt;*2",<br>                 // SELECT statement<br>              db // connect object<br>             ); <br>   // create select stream<br> <br> float f1;<br> char f2[31];<br> char f22;<br> int f3;<br> otl_datetime f4;<br><br><br> <br> i&lt;&lt;8&lt;&lt;8; // assigning :f11 = 8, :f12=8<br>   // SELECT automatically executes when all input variables are<br>   // assigned. First portion of output rows is fetched to the buffer<br><br> cout&lt;&lt;"=====&gt; Fetching rows and printing out default values instead of NULLs"&lt;&lt;endl;<br> while(!i.eof()){ // while not end-of-data<br>  i&gt;&gt;f1;<br>  cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;", ";<br>  i&gt;&gt;f2;<br>  cout&lt;&lt;"f2="&lt;&lt;f2&lt;&lt;", ";<br>  i&gt;&gt;f22;<br>  cout&lt;&lt;"f22="&lt;&lt;f22&lt;&lt;", ";<br>  i&gt;&gt;f3;<br>  cout&lt;&lt;"f3="&lt;&lt;f3&lt;&lt;", ";<br>  i&gt;&gt;f4;<br>  cout&lt;&lt;"f4="&lt;&lt;f4.month&lt;&lt;"/"<br>      &lt;&lt;f4.day&lt;&lt;"/"<br>      &lt;&lt;f4.year&lt;&lt;" "<br>      &lt;&lt;f4.hour&lt;&lt;":"<br>      &lt;&lt;f4.minute&lt;&lt;":"<br>      &lt;&lt;f4.second;<br>  cout&lt;&lt;endl;<br> }<br><br> i&lt;&lt;8&lt;&lt;8; // assigning :f11 = 8, :f12=8<br> cout&lt;&lt;"=====&gt; Fetching rows and printing out NULLs"&lt;&lt;endl;<br> while(!i.eof()){ // while not end-of-data<br>  i&gt;&gt;f1;<br>  if(i.is_null())<br>   cout&lt;&lt;"f1=NULL, ";<br>  else<br>   cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;", ";<br>  i&gt;&gt;f2;<br>  if(i.is_null())<br>   cout&lt;&lt;"f2=NULL, ";<br>  else<br>   cout&lt;&lt;"f2="&lt;&lt;f2&lt;&lt;", ";<br>  i&gt;&gt;f22;<br>  if(i.is_null())<br>   cout&lt;&lt;"f22=NULL, ";<br>  else<br>   cout&lt;&lt;"f22="&lt;&lt;f22&lt;&lt;", ";<br>  i&gt;&gt;f3;<br>  if(i.is_null())<br>   cout&lt;&lt;"f3=NULL, ";<br>  else<br>   cout&lt;&lt;"f3="&lt;&lt;f3&lt;&lt;", ";<br>  i&gt;&gt;f4;<br>  if(i.is_null())<br>   cout&lt;&lt;"f4=NULL,";<br>  else<br>   cout&lt;&lt;"f4="&lt;&lt;f4.month&lt;&lt;"/"<br>       &lt;&lt;f4.day&lt;&lt;"/"<br>       &lt;&lt;f4.year&lt;&lt;" "<br>       &lt;&lt;f4.hour&lt;&lt;":"<br>       &lt;&lt;f4.minute&lt;&lt;":"<br>       &lt;&lt;f4.second;<br>  cout&lt;&lt;endl;<br> }<br><br>}<br><br>int main()<br>{<br> <a href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize OCI environment<br> try{<br><br>  db.rlogon("scott/tiger"); // connect to Oracle<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (db,<br>    "drop table test_tab",<br>    otl_exception::disabled // disable OTL exceptions<br>   ); // drop table<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (db,<br>    "create table test_tab(f1 int, f2 varchar(30), f3 int, f4 date)"<br>    );  // create table<br><br>  insert(); // insert records into table<br>  select(); // select records from table<br><br> }<br><br> catch(<a href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br> }<br><br> db.logoff(); // disconnect from Oracle<br><br> return 0;<br><br>}
</pre>

  <h2>Output</h2>
  <pre>
=====&gt; Fetching rows and printing out default values instead of NULLs<br>f1=8, f2=Name8, f22=N, f3=-1, f4=2/24/2001 13:21:11<br>f1=9, f2=Name9, f22=N, f3=-1, f4=2/24/2001 13:21:11<br>f1=10, f2=***NULL***, f22=*, f3=-1, f4=1/1/2000 0:0:0<br>f1=11, f2=Name11, f22=N, f3=-1, f4=2/24/2001 13:21:11<br>f1=12, f2=Name12, f22=N, f3=-1, f4=2/24/2001 13:21:11<br>f1=13, f2=Name13, f22=N, f3=-1, f4=2/24/2001 13:21:11<br>f1=14, f2=Name14, f22=N, f3=-1, f4=2/24/2001 13:21:11<br>f1=15, f2=Name15, f22=N, f3=-1, f4=2/24/2001 13:21:11<br>f1=16, f2=Name16, f22=N, f3=-1, f4=2/24/2001 13:21:11<br>=====&gt; Fetching rows and printing out NULLs<br>f1=8, f2=Name8, f22=N, f3=NULL, f4=2/24/2001 13:21:11<br>f1=9, f2=Name9, f22=N, f3=NULL, f4=2/24/2001 13:21:11<br>f1=10, f2=NULL, f22=NULL, f3=NULL, f4=NULL,<br>f1=11, f2=Name11, f22=N, f3=NULL, f4=2/24/2001 13:21:11<br>f1=12, f2=Name12, f22=N, f3=NULL, f4=2/24/2001 13:21:11<br>f1=13, f2=Name13, f22=N, f3=NULL, f4=2/24/2001 13:21:11<br>f1=14, f2=Name14, f22=N, f3=NULL, f4=2/24/2001 13:21:11<br>f1=15, f2=Name15, f22=N, f3=NULL, f4=2/24/2001 13:21:11<br>f1=16, f2=Name16, f22=N, f3=NULL, f4=2/24/2001 13:21:11<br><br>
</pre>
  <hr width="100%">

  <center>
    <a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a><a href="home.htm">Go Home</a>
  </center>

  <p>Copyright &copy; 1996-2009, Sergei Kuchin, email: <a href="mailto:skuchin@aceweb.com">skuchin@aceweb.com</a>, <a href="mailto:skuchin@gmail.com">skuchin@gmail.com <script language="JavaScript" type="text/javascript">
<!-- hide from old browsers
  var modDate = new Date(document.lastModified)
  document.write("<i> Last Updated:<\/i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
  //-->
  </script></a>.</p>

  <p><i>Permission to use, copy, modify and redistribute this document for any purpose is hereby granted without fee, provided that the above copyright notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</i></p><script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script><script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
  pageTracker._trackPageview();
  </script>
</body>
</html>
