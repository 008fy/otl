<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
  <meta name="generator" content="HTML Tidy for Windows (vers 25 March 2009), see www.w3.org">
  <meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
  <meta name="Author" content="Sergei Kuchin">
  <meta name="GENERATOR" content="Mozilla/4.77 [en] (Win95; U) [Netscape]">
  <meta name="KeyWords" content="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library">

  <title>OTL 4.0, Example 153 (create_stored_proc_call)</title>
</head>

<body>
  <center>
    <h1>OTL 4.0, Example 153 (create_stored_proc_call)</h1>
  </center>

  <h1>Example 153 (create_stored_proc_call)</h1>This example demonstrates the use of otl_stream::<a href="otl3_stream_class.htm#create_stored_proc_call">create_stored_proc_call</a>() in OTL/OCI8/9/10/11.

  <h2>Source Code</h2>
  <pre>
#include &lt;iostream&gt;<br>using namespace std;<br><br>#include &lt;stdio.h&gt;
</pre>
  <pre>
#define OTL_ORA8 // Compile OTL 4.0/OCI8<br>//#define OTL_ORA8I // Compile OTL 4.0/OCI8i<br>//#define OTL_ORA9I // Compile OTL 4.0/OCI9i<br>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file<br><br><a href=
"otl3_connect_class.htm">otl_connect</a> db; // connect object<br><br><br>void print_proc_type(const int stm_type)<br>{<br>  switch(stm_type){<br>  case otl_inout_stream_type:<br>    cout&lt;&lt;"OTL IN/OUT stream";<br>    break;<br>  case otl_refcur_stream_type:<br>    cout&lt;&lt;"OTL reference cursor stream";<br>    break;<br>  case otl_constant_sql_type:<br>    cout&lt;&lt;"OTL constant statement without any parameters";<br>    break;<br>  case otl_mixed_refcur_stream_type:<br>    cout&lt;&lt;"OTL mixed reference cursor stream";<br>    break;<br>  }<br>}<br><br>void stored_proc()<br>{ <br> <a href=
"otl3_stream_class.htm">otl_stream</a> s; // stream variable, external to the create_stored_proc_call()<br><br> char sql_stm[4096];<br> int stm_type; <br> char refcur_placeholder[128];<br><br>  otl_stream::<a href=
"otl3_stream_class.htm#create_stored_proc_call">create_stored_proc_call</a> <br>   (db, // connect object<br>    s, // an external stream variable is needed here<br>    sql_stm, // output buffer for generating a stored procedure call<br>    stm_type, // output paremeter, indicating what type of stored procedure<br>    refcur_placeholder, // output parameter, which gets populated<br>                        // in the case of a stored procedure that returns<br>                        // a reference cursor.<br>    "my_proc1", // stored procedure name<br>    "my_pkg" // PL/SQL package name<br>   );<br>  cout&lt;&lt;"SQL_STM1="&lt;&lt;sql_stm&lt;&lt;endl;<br>  cout&lt;&lt;"STM_TYPE1=";<br>  print_proc_type(stm_type);<br>  cout&lt;&lt;endl;<br>  cout&lt;&lt;"REF.CUR.NAME1="&lt;&lt;refcur_placeholder&lt;&lt;endl;<br>  cout&lt;&lt;endl;<br><br>  otl_stream::<a href="otl3_stream_class.htm#create_stored_proc_call">create_stored_proc_call</a> <br>   (db, // connect object<br>    s, // an external stream variable is needed here<br>    sql_stm, // output buffer for generating a stored procedure call<br>    stm_type, // output paremeter, indicating what type of stored procedure<br>    refcur_placeholder, // output parameter, which gets populated<br>                        // in the case of a stored procedure that returns<br>                        // a reference cursor.<br>    "my_proc2", // stored procedure name<br>    "my_pkg" // PL/SQL package name<br>   );<br>  cout&lt;&lt;"SQL_STM2="&lt;&lt;sql_stm&lt;&lt;endl;<br>  cout&lt;&lt;"STM_TYPE2=";<br>  print_proc_type(stm_type);<br>  cout&lt;&lt;endl;<br>  cout&lt;&lt;"REF.CUR.NAME2="&lt;&lt;refcur_placeholder&lt;&lt;endl;<br>  cout&lt;&lt;endl;<br><br>  otl_stream::<a href="otl3_stream_class.htm#create_stored_proc_call">create_stored_proc_call</a> <br>   (db, // connect object<br>    s, // an external stream variable is needed here<br>    sql_stm, // output buffer for generating a stored procedure call<br>    stm_type, // output paremeter, indicating what type of stored procedure<br>    refcur_placeholder, // output parameter, which gets populated<br>                        // in the case of a stored procedure that returns<br>                        // a reference cursor.<br>    "my_func1", // stored function name<br>    "my_pkg" // PL/SQL package name<br>   );<br>  cout&lt;&lt;"SQL_STM3="&lt;&lt;sql_stm&lt;&lt;endl;<br>  cout&lt;&lt;"STM_TYPE3=";<br>  print_proc_type(stm_type);<br>  cout&lt;&lt;endl;<br>  cout&lt;&lt;"REF.CUR.NAME3="&lt;&lt;refcur_placeholder&lt;&lt;endl;<br>  cout&lt;&lt;endl;<br><br>  otl_stream::<a href="otl3_stream_class.htm#create_stored_proc_call">create_stored_proc_call</a> <br>   (db, // connect object<br>    s, // an external stream variable is needed here<br>    sql_stm, // output buffer for generating a stored procedure call<br>    stm_type, // output paremeter, indicating what type of stored procedure<br>    refcur_placeholder, // output parameter, which gets populated<br>                        // in the case of a stored procedure that returns<br>                        // a reference cursor.<br>    "my_proc3", // stored procedure name<br>    "my_pkg" // PL/SQL package name<br>   );<br>  cout&lt;&lt;"SQL_STM4="&lt;&lt;sql_stm&lt;&lt;endl;<br>  cout&lt;&lt;"STM_TYPE4=";<br>  print_proc_type(stm_type);<br>  cout&lt;&lt;endl;<br>  cout&lt;&lt;"REF.CUR.NAME4="&lt;&lt;refcur_placeholder&lt;&lt;endl;<br>  cout&lt;&lt;endl;<br><br>  otl_stream::<a href="otl3_stream_class.htm#create_stored_proc_call">create_stored_proc_call</a> <br>   (db, // connect object<br>    s, // an external stream variable is needed here<br>    sql_stm, // output buffer for generating a stored procedure call<br>    stm_type, // output paremeter, indicating what type of stored procedure<br>    refcur_placeholder, // output parameter, which gets populated<br>                        // in the case of a stored procedure that returns<br>                        // a reference cursor.<br>    "my_func2", // stored function name<br>    "my_pkg" // PL/SQL package name<br>   );<br>  cout&lt;&lt;"SQL_STM5="&lt;&lt;sql_stm&lt;&lt;endl;<br>  cout&lt;&lt;"STM_TYPE5=";<br>  print_proc_type(stm_type);<br>  cout&lt;&lt;endl;<br>  cout&lt;&lt;"REF.CUR.NAME5="&lt;&lt;refcur_placeholder&lt;&lt;endl;<br>  cout&lt;&lt;endl;<br><br>  otl_stream::<a href="otl3_stream_class.htm#create_stored_proc_call">create_stored_proc_call</a> <br>   (db, // connect object<br>    s, // an external stream variable is needed here<br>    sql_stm, // output buffer for generating a stored procedure call<br>    stm_type, // output paremeter, indicating what type of stored procedure<br>    refcur_placeholder, // output parameter, which gets populated<br>                        // in the case of a stored procedure that returns<br>                        // a reference cursor.<br>    "my_proc4", // stored function name<br>    "my_pkg", // PL/SQL package name<br>    0, // schema name<br>    false, // schema name not included<br>    2001, // varchar paratemer default size<br>    otl_var_double, // default type to map NUMERIC parameters to<br>    100 // refernce cursor buffer size<br>   );<br>  cout&lt;&lt;"SQL_STM6="&lt;&lt;sql_stm&lt;&lt;endl;<br>  cout&lt;&lt;"STM_TYPE6=";<br>  print_proc_type(stm_type);<br>  cout&lt;&lt;endl;<br>  cout&lt;&lt;"REF.CUR.NAME6="&lt;&lt;refcur_placeholder&lt;&lt;endl;<br>  cout&lt;&lt;endl;<br><br>  otl_stream::<a href="otl3_stream_class.htm#create_stored_proc_call">create_stored_proc_call</a> <br>   (db, // connect object<br>    s, // an external stream variable is needed here<br>    sql_stm, // output buffer for generating a stored procedure call<br>    stm_type, // output paremeter, indicating what type of stored procedure<br>    refcur_placeholder, // output parameter, which gets populated<br>                        // in the case of a stored procedure that returns<br>                        // a reference cursor.<br>    "my_func3", // stored function name<br>    "my_pkg", // PL/SQL package name<br>    0, // schema name<br>    false, // schema name not included<br>    2001, // varchar paratemer default size<br>    otl_var_double, // default type to map NUMERIC parameters to<br>    100 // refernce cursor buffer size<br>   );<br>  cout&lt;&lt;"SQL_STM7="&lt;&lt;sql_stm&lt;&lt;endl;<br>  cout&lt;&lt;"STM_TYPE7=";<br>  print_proc_type(stm_type);<br>  cout&lt;&lt;endl;<br>  cout&lt;&lt;"REF.CUR.NAME7="&lt;&lt;refcur_placeholder&lt;&lt;endl;<br>  cout&lt;&lt;endl;<br><br>}<br><br>int main()<br>{<br> <a href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize OCI environment<br> try{<br><br>  db.rlogon("scott/tiger"); // connect to Oracle<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "drop table test_tab",<br>    otl_exception::disabled // disable OTL exceptions<br>   ); // drop table<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "create table test_tab(f1 number, f2 varchar2(30))"<br>    );  // create table<br><br>  // create a PL/SQL package<br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (db,<br>    "CREATE OR REPLACE PACKAGE my_pkg IS "<br>    " "<br>    "  TYPE my_cursor IS REF CURSOR; "<br>    " "<br>    "  PROCEDURE my_proc1; "<br>    "  PROCEDURE my_proc2 "<br>    "   (f1 IN NUMBER, "<br>    "    f2 IN OUT VARCHAR2, "<br>    "    f3 OUT DATE); "<br>    " "<br>    "  FUNCTION my_func1 "<br>    "   (f1 IN NUMBER, "<br>    "    f2 IN VARCHAR2) "<br>    "  RETURN DATE; "<br>    " "<br>    "  PROCEDURE my_proc3 "<br>    "   (f1 IN NUMBER, "<br>    "    f2 IN VARCHAR2, "<br>    "    f3 OUT my_cursor); "<br>    " "<br>    "  PROCEDURE my_proc4 "<br>    "   (f1 IN NUMBER, "<br>    "    f2 IN VARCHAR2, "<br>    "    f3 OUT NUMBER, "<br>    "    f4 OUT my_cursor, "<br>    "    f5 OUT my_cursor); "<br>    " "<br>    "  FUNCTION my_func2 "<br>    "   (f1 IN NUMBER, "<br>    "    f2 IN VARCHAR2) "<br>    "  RETURN my_cursor; "<br>    " "<br>    "  FUNCTION my_func3 "<br>    "   (f1 IN NUMBER, "<br>    "    f2 IN VARCHAR2, "<br>    "    f3 OUT NUMBER) "<br>    "  RETURN my_cursor; "<br>    "END; "<br>   );<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (db,<br>    "CREATE OR REPLACE PACKAGE BODY my_pkg IS "<br>    " "<br>    "  PROCEDURE my_proc1 "<br>    "  IS "<br>    "  BEGIN "<br>    "    NULL; "<br>    "  END; "<br>    "   "<br>    "  PROCEDURE my_proc2 "<br>    "   (f1 IN NUMBER, "<br>    "    f2 IN OUT VARCHAR2, "<br>    "    f3 OUT DATE) "<br>    "  IS "<br>    "  BEGIN "<br>    "    NULL; "<br>    "  END; "<br>    " "   <br>    "  FUNCTION my_func1 "<br>    "   (f1 IN NUMBER, "<br>    "    f2 IN VARCHAR2) "<br>    "  RETURN DATE "<br>    "  IS "<br>    "  BEGIN "<br>    "    RETURN SYSDATE; "<br>    "  END; "<br>    " "   <br>    "  PROCEDURE my_proc3 "<br>    "   (f1 IN NUMBER, "<br>    "    f2 IN VARCHAR2, "<br>    "    f3 OUT my_cursor) "<br>    "  IS "<br>    "  BEGIN "<br>    "    NULL; "<br>    "  END; "<br>    " "   <br>    "  PROCEDURE my_proc4 "<br>    "   (f1 IN NUMBER, "<br>    "    f2 IN VARCHAR2, "<br>    "    f3 OUT NUMBER, "<br>    "    f4 OUT my_cursor, "<br>    "    f5 OUT my_cursor) "<br>    "  IS "<br>    "  BEGIN "<br>    "    NULL; "<br>    "  END; "<br>    " "   <br>    "  FUNCTION my_func2 "<br>    "   (f1 IN NUMBER, "<br>    "    f2 IN VARCHAR2) "<br>    "  RETURN my_cursor "<br>    "  IS "<br>    "   lv_cur my_cursor; "<br>    "  BEGIN "<br>    "    OPEN lv_cur FOR "<br>    "    SELECT * FROM test_tab; "<br>    "    RETURN lv_cur; "<br>    "  END; "<br>    " "   <br>    "  FUNCTION my_func3 "<br>    "   (f1 IN NUMBER, "<br>    "    f2 IN VARCHAR2, "<br>    "    f3 OUT NUMBER) "<br>    "  RETURN my_cursor "<br>    "  IS "<br>    "   lv_cur my_cursor; "<br>    "  BEGIN "<br>    "    OPEN lv_cur FOR "<br>    "    SELECT * FROM test_tab; "<br>    "    RETURN lv_cur; "<br>    "  END; "<br>    " "   <br>    "END; "<br>   );<br><br>  stored_proc(); // generate a stored procedure call<br><br> }<br><br> catch(<a href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br> }<br><br> db.logoff(); // disconnect from Oracle<br><br> return 0;<br><br>}
</pre>

  <h2>Output</h2>
  <pre>
SQL_STM1=BEGIN my_pkg.my_proc1; END;<br>STM_TYPE1=OTL constant statement without any parameters<br>REF.CUR.NAME1=<br><br>SQL_STM2=BEGIN my_pkg.my_proc2(:f1&lt;double,in&gt; ,:f2&lt;char[2001],inout&gt; ,:f3&lt;timestamp,out&gt; );  END;<br>STM_TYPE2=OTL IN/OUT stream<br>REF.CUR.NAME2=<br><br>SQL_STM3=BEGIN :rc__&lt;timestamp,out&gt; := my_pkg.my_func1(:f1&lt;double,in&gt; ,:f2&lt;char[2001],in&gt; );  END;<br>STM_TYPE3=OTL IN/OUT stream<br>REF.CUR.NAME3=<br><br>SQL_STM4=BEGIN my_pkg.my_proc3(:f1&lt;double,in&gt; ,:f2&lt;char[2001],in&gt; ,:f3  );  END;<br>STM_TYPE4=OTL reference cursor stream<br>REF.CUR.NAME4=:f3<br><br>SQL_STM5=BEGIN :rc__  := my_pkg.my_func2(:f1&lt;double,in&gt; ,:f2&lt;char[2001],in&gt; );  END;<br>STM_TYPE5=OTL reference cursor stream<br>REF.CUR.NAME5=:rc__<br><br>SQL_STM6=BEGIN my_pkg.my_proc4(:f1&lt;double,in&gt; ,:f2&lt;char[2001],in&gt; ,:f3&lt;double,out&gt; ,:f4&lt;refcur,out[100]&gt;,:f5&lt;refcur,out[100]&gt;);  END;<br>STM_TYPE6=OTL mixed reference cursor stream<br>REF.CUR.NAME6=<br><br>SQL_STM7=BEGIN :rc__&lt;refcur,out[100]&gt; := my_pkg.my_func3(:f1&lt;double,in&gt; ,:f2&lt;char[2001],in&gt; ,:f3&lt;double,out&gt; );  END;<br>STM_TYPE7=OTL mixed reference cursor stream<br>REF.CUR.NAME7=<br><br>For more detail on "mixed reference cursor streams", see also examples <a href="otl4_ex148.htm">148</a>, <a href="otl4_ex149.htm">149</a>, <a href="otl4_ex151.htm">151</a>.<br><br>
</pre>
  <hr width="100%">

  <center>
    <a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a><a href="home.htm">Go Home</a>
  </center>

  <p>Copyright &copy; 1996-2009, Sergei Kuchin, email: <a href="mailto:skuchin@aceweb.com">skuchin@aceweb.com</a>, <a href="mailto:skuchin@gmail.com">skuchin@gmail.com <script language="JavaScript" type="text/javascript">
<!-- hide from old browsers
  var modDate = new Date(document.lastModified)
  document.write("<i> Last Updated:<\/i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
  //-->
  </script></a>.</p>

  <p><i>Permission to use, copy, modify and redistribute this document for any purpose is hereby granted without fee, provided that the above copyright notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</i></p><script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script><script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
  pageTracker._trackPageview();
  </script>
</body>
</html>
