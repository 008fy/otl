<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
  <meta name="generator" content="HTML Tidy for Windows (vers 25 March 2009), see www.w3.org">
  <meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
  <meta name="Author" content="Sergei Kuchin">
  <meta name="GENERATOR" content="Mozilla/4.77 [en] (Win95; U) [Netscape]">
  <meta name="KeyWords" content="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library">

  <title>OTL 4.0, STL-compliant iterators</title>
</head>

<body>
  <center>
    <h1>OTL 4.0, STL-compliant output iterator</h1>
  </center>

  <h1>STL-compliant output iterator</h1>

  <h1>otl_output_iterator&lt;T&gt;</h1>

  <table cellspacing="0" cellpadding="0" width="100%">
    <tr>
      <td align="left"><img src="iterator.gif" height="38" width="194"></td>

      <td align="right"><img src="type.gif" height="39" width="194"></td>
    </tr>

    <tr>
      <td align="left" valign="top"><b>Category</b>: iterators</td>

      <td align="right" valign="top"><b>Component type</b>: type</td>
    </tr>
  </table>

  <h3>Description</h3><tt>otl_output_iterator</tt> is an <a href="http://www.sgi.com/tech/stl/OutputIterator.html">Output Iterator</a> that performs output of objects of type <tt>T</tt> to a particular <a href="otl3_stream_class.htm">otl_stream</a>. Note that all of the restrictions of an <a href="http://www.sgi.com/tech/stl/OutputIterator.html">Output Iterator</a> must be obeyed, including the restrictions on the ordering of <tt>operator*</tt> and <tt>operator++</tt> operations.

  <h3>Definition</h3>Defined in the OTL header file..

  <h3>Template parameters</h3>

  <table border="2">
    <tr>
      <th>Parameter&nbsp;</th>

      <th>Description&nbsp;</th>

      <th>Default&nbsp;</th>
    </tr>

    <tr>
      <td valign="top"><tt>T</tt></td>

      <td valign="top">The type of object that will be written to the <tt>otl_stream</tt>. The set of value types of an <tt>otl_output_iterator</tt> consists of a single type, <tt>T</tt>.&nbsp;</td>

      <td valign="top">&nbsp;</td>
    </tr>
  </table>

  <h3>Model of</h3><a href="http://www.sgi.com/tech/stl/OutputIterator.html">Output Iterator</a>.

  <h3>Type requirements</h3><tt>T</tt> must be a type such that <tt>otl_stream s;...; s &lt;&lt; T</tt> is a valid expression.

  <h3>Public base classes</h3>None.

  <h3>Members</h3>

  <table border="2">
    <tr>
      <th>Member&nbsp;</th>

      <th>Where defined&nbsp;</th>

      <th>Description&nbsp;</th>
    </tr>

    <tr>
      <td valign="top"><tt>otl_output_iterator(otl_stream&amp;)</tt></td>

      <td valign="top"><tt>otl_output_iterator</tt></td>

      <td valign="top">See below.&nbsp;</td>
    </tr>

    <tr>
      <td valign="top"><tt>otl_output_iterator(const otl_output_iterator&amp;)</tt></td>

      <td valign="top"><a href="http://www.sgi.com/tech/stl/OutputIterator.html">Output Iterator</a></td>

      <td valign="top">The copy constructor&nbsp;</td>
    </tr>

    <tr>
      <td valign="top"><tt>otl_output_iterator&amp; operator=(const otl_output_iterator&amp;)</tt></td>

      <td valign="top"><a href="http://www.sgi.com/tech/stl/OutputIterator.html">Output Iterator</a></td>

      <td valign="top">The assignment operator&nbsp;</td>
    </tr>

    <tr>
      <td valign="top"><tt>otl_output_iterator&amp; operator=(const T&amp;)</tt></td>

      <td valign="top"><a href="http://www.sgi.com/tech/stl/OutputIterator.html">Output Iterator</a></td>

      <td valign="top">Used to implement the <a href="http://www.sgi.com/Technology/STL/OutputIterator.html">Output Iterator</a> requirement <tt>*i = t</tt>. <a href="#1">[1]</a></td>
    </tr>

    <tr>
      <td valign="top"><tt>otl_output_iterator&amp; operator*()</tt></td>

      <td valign="top"><a href="http://www.sgi.com/tech/stl/OutputIterator.html">Output Iterator</a></td>

      <td valign="top">Used to implement the <a href="http://www.sgi.com/Technology/STL/OutputIterator.html">Output Iterator</a> requirement <tt>*i = t</tt>. <a href="#1">[1]</a></td>
    </tr>

    <tr>
      <td valign="top"><tt>otl_output_iterator&amp; operator++()</tt></td>

      <td valign="top"><a href="http://www.sgi.com/tech/stl/OutputIterator.html">Output Iterator</a></td>

      <td valign="top">Preincrement&nbsp;</td>
    </tr>

    <tr>
      <td valign="top"><tt>otl_output_iterator&amp; operator++(int)</tt></td>

      <td valign="top"><a href="http://www.sgi.com/tech/stl/OutputIterator.html">Output Iterator</a></td>

      <td valign="top">Postincrement&nbsp;</td>
    </tr>

    <tr>
      <td valign="top"><tt>output_iterator_tag iterator_category(const otl_output_iterator&amp;)</tt></td>

      <td valign="top"><a href="http://www.sgi.com/tech/stl/iterator_tags.html">iterator tags</a></td>

      <td valign="top">Returns the iterator's category.&nbsp;</td>
    </tr>
  </table>

  <h3>New members</h3>These members are not defined in the <a href="http://www.sgi.com/tech/stl/OutputIterator.html">Output Iterator</a> requirements, but are specific to <tt>otl_output_iterator</tt>.<br>
  &nbsp;

  <table border="2">
    <tr>
      <th>Function&nbsp;</th>

      <th>Description&nbsp;</th>
    </tr>

    <tr>
      <td valign="top"><tt>otl_output_iterator(otl_stream&amp; s)</tt></td>

      <td valign="top">Creates an <tt>otl_output_iterator</tt> such that assignment of <tt>t</tt> through it is equivalent to <tt>s &lt;&lt; t</tt>.&nbsp;</td>
    </tr>
  </table>

  <h3>Notes</h3><a name="1"></a>[1] Note how assignment through an <tt>otl_output_iterator</tt> is implemented. In general, unary <tt>operator*</tt> must be defined so that it returns a proxy object, where the proxy object defines <tt>operator=</tt> to perform the output operation. In this case, for the sake of simplicity, the proxy object is the <tt>otl_output_iterator</tt> itself. That is, <tt>*i</tt> simply returns <tt>i</tt>, and <tt>*i = t</tt> is equivalent to <tt>i = t</tt>. You should not, however, rely on this behavior. It is an implementation detail, and it is not guaranteed to remain the same in future versions.

  <h3>See also</h3><a href="otl3_input_iterator.htm">otl_input_iterator</a>, <a href="http://www.sgi.com/tech/stl/OutputIterator.html">Output Iterator</a>, <a href="http://www.sgi.com/tech/stl/InputIterator.html">Input Iterator</a>.
  <hr width="100%">

  <center>
    <p><a href="otl3.htm">Contents</a> <a href="home.htm">Go Home</a></p>
  </center>

  <p>Copyright &copy; 1996-2009, Sergei Kuchin, email: <a href="mailto:skuchin@aceweb.com">skuchin@aceweb.com</a>, <a href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>.&nbsp;<script language="JavaScript" type="text/javascript">
<!-- hide from oldgmailsers
  var modDate = new Date(document.lastModified)
  document.write("<i> Last Updated:<\/i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
  //-->
  </script></p>

  <p><i>Permission to use, copy, modify and redistribute this document for any purpose is hereby granted without fee, provided that the above copyright notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</i> <script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script> <script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
  pageTracker._trackPageview();
  </script></p>
</body>
</html>
