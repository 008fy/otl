<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
  <meta name="generator" content="HTML Tidy for Windows (vers 25 March 2009), see www.w3.org">
  <meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
  <meta name="Author" content="Sergei Kuchin">
  <meta name="GENERATOR" content="Mozilla/4.77 [en] (Win95; U) [Netscape]">
  <meta name="KeyWords" content="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library">

  <title>OTL 4.0, SAP DB, Example 2 (Implicit Select/Result Set returned by a stored procedure)</title>
</head>

<body>
  <center>
    <h1>OTL 4.0, SAP DB, Example 2 (<b>Implicit Select/Result Set returned by a stored procedure</b>)</h1>
  </center>

  <h1>SAP DB, Example 2 (<b>Implicit Select/Result Set returned by a stored procedure</b>)</h1>This example demonstrates a SAP DB stored procedure call that returns a result set.

  <h2>Source Code</h2>
  <pre>
#include &lt;iostream.h&gt;
#include &lt;stdio.h&gt;
#define OTL_ODBC // Compile OTL 4.0/ODBC
#include &lt;otlv4.h&gt;

<a href="otl3_connect_class.htm">otl_connect</a> db; // connect object

void insert()
// insert rows into table
{ 
 <a href="otl3_stream_class.htm">otl_stream</a> o(50, // buffer size
              "insert into test_tab values(:f1&lt;float&gt;,:f2&lt;char[31]&gt;)", 
                 // SQL statement
              db // connect object
             );
 char tmp[32];

 for(int i=1;i&lt;=100;++i){
  sprintf(tmp,"Name%d",i);
  o&lt;&lt;(float)i&lt;&lt;tmp;
 }
}

void select(void)
// fetching result set returned by a stored procedure
{ 
 <a href="otl3_stream_class.htm">otl_stream</a> i(50, // buffer size
              "{call my_proc(:f1&lt;int,in&gt;)}",
                 // implicit SELECT statement
              db, // connect object
              <a href="otl3_stream_class.htm#implicit_select">otl_implicit_select</a> // implicit SELECT statement
             ); 
   // create select stream
 
 int f1;
 char f2[31];

 i&lt;&lt;8; // assigning :f1 = 8
   // SELECT automatically executes when all input variables are
   // assigned. First portion of output rows is fetched to the buffer

 while(!i.eof()){ // while not end-of-data
  i&gt;&gt;f1&gt;&gt;f2;
  cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;", f2="&lt;&lt;f2&lt;&lt;endl;
 }
 
 i&lt;&lt;4; // assigning :f1 = 4
   // SELECT automatically re-executes when all input variables are
   // assigned. First portion of out rows is fetched to the buffer

 while(!i.eof()){ // while not end-of-data
  i&gt;&gt;f1&gt;&gt;f2;
  cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;", f2="&lt;&lt;f2&lt;&lt;endl;
 }

}

int main()
{
 otl_connect::otl_initialize(); // initialize ODBC environment
 try{
  db.rlogon("uid=scott;pwd=tiger;dsn=sapdb"); // connect to ODBC
  otl_cursor::direct_exec
   (
    db,
    "drop table test_tab",
    otl_exception::disabled // disable OTL exceptions
   ); // drop table

  otl_cursor::direct_exec
   (
    db,
    "create table test_tab(f1 int, f2 varchar(30))"
    );  // create table

  otl_cursor::direct_exec
   (
    db,
    "DROP PROCEDURE my_proc",
    0 // ignore any errors
    );  // drop stored procedure

  otl_cursor::direct_exec
   (
    db,
    "CREATE DBPROC my_proc "
    "  (IN F1 INTEGER) "
    " RETURNS CURSOR "
    "AS "
    "$CURSOR = 'F1_CURSOR'; "
    "DECLARE :$CURSOR CURSOR FOR SELECT * FROM SCOTT.test_tab "
    "WHERE f1&gt;=:F1 AND f1&lt;=:F1*2; "
    );  // create stored procedure


  insert(); // insert records into table
  select(); // select records from table


 }
 catch(otl_exception&amp; p){ // intercept OTL exceptions
  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message
  cerr&lt;&lt;p.code&lt;&lt;endl; // print out error code
  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error
  cerr&lt;&lt;p.sqlstate&lt;&lt;endl; // print out SQLSTATE message
  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error
 }
 db.logoff(); // disconnect from the data source
 return 0;
} 


</pre>

  <h2>Output</h2>
  <pre>
 A=2, B=Test String1


</pre>
  <hr width="100%">

  <center>
    <a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a><a href="home.htm">Go Home</a>
  </center>

  <p>Copyright &copy; 1996-2009, Sergei Kuchin, email: <a href="mailto:skuchin@aceweb.com">skuchin@aceweb.com</a>, <a href="mailto:skuchin@gmail.com">skuchin@gmail.com<script language="Javgmailpt">
<!-- hide from old browsers
  var modDate = new Date(document.lastModified)
  document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
  //-->
  </script></a> .</p>

  <p><i>Permission to use, copy, modify and redistribute this document for any purpose is hereby granted without fee, provided that the above copyright notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</i> <script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script> <script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
  pageTracker._trackPageview();
  </script></p>
</body>
</html>
