<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
  <meta name="generator" content="HTML Tidy for Windows (vers 25 March 2009), see www.w3.org">
  <meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
  <meta name="Author" content="Sergei Kuchin">
  <meta name="GENERATOR" content="Mozilla/4.76 [en] (Win95; U) [Netscape]">
  <meta name="KeyWords" content="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library">

  <title>OTL 4.0, Example 114 (OTL stream pooling, OTL/ODBC)</title>
</head>

<body>
  <center>
    <h1>OTL 4.0, Example 114 (OTL stream pooling, OTL/ODBC)</h1>
  </center>

  <h1>Example 114 (OTL stream pooling, OTL/ODBC)</h1>This example demonstrates the OTL <a href="otl3_stream_pooling.htm">stream pooling</a> for OTL/ODBC. This example works with Oracle ODBC drivers for Oracle 8/8i. It also can work with MyODBC/MySQL.

  <p>It does NOT work with any of MS SQL Server ODBC drivers, because, simply put, they suck. They don't allow the program to keep more than one fetch sequence open (SELECT statements, prepared, and ready to be executed with new sets of input variables). Even the use of static cursors doesn't help in this case.</p>

  <h2>Source Code</h2>
  <pre>
#include &lt;iostream&gt;<br>using namespace std;<br><br>#include &lt;stdio.h&gt;
</pre>
  <pre>
#define OTL_ODBC // Compile OTL 4.0/ODBC<br>#define OTL_STL // turn on OTL in the STL compliance mode<br>#define <a href="otl3_compile.htm#OTL_STREAM_POOLING_ON">OTL_STREAM_POOLING_ON</a> <br> // turn on OTL stream pooling.<br> // #define OTL_STREAM_POOLING_ON line <br> // can be commented out, the number of iterations in<br> // the select() loop can be increased, and the difference <br> // in performace with and without OTL_STREAM_POOLING_ON can<br> // be benchmarked. The difference should grow with the overall<br> // number of streams to be used in one program.<br><br>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file<br><br><a href="otl3_connect_class.htm">otl_connect</a> db; // connect object<br><br>void insert()<br>// insert rows into table<br>{ <br> <a href=
"otl3_stream_class.htm">otl_stream</a> o(50, // buffer size<br>              "insert into test_tab values(:f1&lt;int&gt;,:f2&lt;char[31]&gt;)", <br>                 // SQL statement<br>              db // connect object<br>             );<br> char tmp[32];<br><br> for(int i=1;i&lt;=100;++i){<br>  sprintf(tmp,"Name%d",i);<br>  o&lt;&lt;i&lt;&lt;tmp;<br> }<br>#ifdef OTL_STREAM_POOLING_ON<br> o.<a href=
"otl3_stream_class.htm#close">close</a>(false); // do not save the stream in the stream pool.<br>                 // in other words, destroy it on the spot, since<br>                 // the stream is not going to be reused later.<br>#else<br> o.close();<br>#endif<br>}<br><br>void select()<br>{ // when this function is called in a loop,<br>  // on the second iteration of the loop the streams i1, i2 will<br>  // will get the instances of the OTL stream from the stream<br>  // pool, "fast reopen", so to speak.<br><br> <a href=
"otl3_stream_class.htm">otl_stream</a> i1(50, // buffer size<br>               "select * from test_tab where f1&gt;=:f11&lt;int&gt; and f1&lt;=:f12&lt;int&gt;*2",<br>                 // SELECT statement<br>              db // connect object<br>             ); <br>   // create select stream<br> <br> <a href=
"otl3_stream_class.htm">otl_stream</a> i2(33, // buffer size<br>               "select f1,f2 from test_tab where f1&gt;=:f11&lt;int&gt; and f1&lt;=:f12&lt;int&gt;*2",<br>                 // SELECT statement<br>              db // connect object<br>             ); <br>   // create select stream<br><br>// i1 and i2 are NOT similar, because their buffer sizes as well<br>// as SQL statements are not equal. It will generate two entry points in the<br>// OTL stream pool.<br> <br> int f1;<br> char f2[31];<br><br> i1&lt;&lt;2&lt;&lt;2; // assigning :f11 = 2, :f12 = 2<br>   // SELECT automatically executes when all input variables are<br>   // assigned. First portion of output rows is fetched to the buffer<br><br> while(!i1.eof()){ // while not end-of-data<br>  i1&gt;&gt;f1&gt;&gt;f2;<br>  cout&lt;&lt;"I1==&gt; f1="&lt;&lt;f1&lt;&lt;", f2="&lt;&lt;f2&lt;&lt;endl;<br> }<br><br> i2&lt;&lt;3&lt;&lt;3; // assigning :f11 = 2, :f12 = 2<br>   // SELECT automatically executes when all input variables are<br>   // assigned. First portion of output rows is fetched to the buffer<br><br> while(!i2.eof()){ // while not end-of-data<br>  i2&gt;&gt;f1&gt;&gt;f2;<br>  cout&lt;&lt;"I2==&gt; f1="&lt;&lt;f1&lt;&lt;", f2="&lt;&lt;f2&lt;&lt;endl;<br> }<br><br>} // destructors of i1, i2 will call the close()<br>  // function for both of the streams and the OTL stream<br>  // instances will be placed in the stream pool.<br><br>int main()<br>{<br> <a href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize the environment<br> try{<br><br>  db.rlogon("scott/tiger@my_db"); // connect to the database<br>#ifdef OTL_STREAM_POOLING_ON<br>  db.<a href="otl3_connect_class.htm#set_stream_pool_size">set_stream_pool_size</a>(2); <br>   // set the maximum stream pool size and actually initializes <br>   // the stream pool.<br>   // if this function is not called, the stream pool<br>   // gets initialized anyway, with the default size of 32 entries.<br>#endif<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "drop table test_tab",<br>    otl_exception::disabled // disable OTL exceptions<br>   ); // drop table<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "create table test_tab(f1 int, f2 varchar(30))"<br>    );  // create table<br><br>  insert(); // insert records into table<br>  for(int i=1;i&lt;=10; ++i){<br>    cout&lt;&lt;"===================&gt; Iteration: "&lt;&lt;i&lt;&lt;endl;<br>    select(); // select records from table<br>  }<br> }<br><br> catch(<a href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br> }<br><br> db.logoff(); // disconnect from the database<br><br> return 0;<br><br>}
</pre>

  <h2>Output</h2>
  <pre>
===================&gt; Iteration: 1<br>I1==&gt; f1=2, f2=Name2<br>I1==&gt; f1=3, f2=Name3<br>I1==&gt; f1=4, f2=Name4<br>I2==&gt; f1=3, f2=Name3<br>I2==&gt; f1=4, f2=Name4<br>I2==&gt; f1=5, f2=Name5<br>I2==&gt; f1=6, f2=Name6<br>===================&gt; Iteration: 2<br>I1==&gt; f1=2, f2=Name2<br>I1==&gt; f1=3, f2=Name3<br>I1==&gt; f1=4, f2=Name4<br>I2==&gt; f1=3, f2=Name3<br>I2==&gt; f1=4, f2=Name4<br>I2==&gt; f1=5, f2=Name5<br>I2==&gt; f1=6, f2=Name6<br>===================&gt; Iteration: 3<br>I1==&gt; f1=2, f2=Name2<br>I1==&gt; f1=3, f2=Name3<br>I1==&gt; f1=4, f2=Name4<br>I2==&gt; f1=3, f2=Name3<br>I2==&gt; f1=4, f2=Name4<br>I2==&gt; f1=5, f2=Name5<br>I2==&gt; f1=6, f2=Name6<br>===================&gt; Iteration: 4<br>I1==&gt; f1=2, f2=Name2<br>I1==&gt; f1=3, f2=Name3<br>I1==&gt; f1=4, f2=Name4<br>I2==&gt; f1=3, f2=Name3<br>I2==&gt; f1=4, f2=Name4<br>I2==&gt; f1=5, f2=Name5<br>I2==&gt; f1=6, f2=Name6<br>===================&gt; Iteration: 5<br>I1==&gt; f1=2, f2=Name2<br>I1==&gt; f1=3, f2=Name3<br>I1==&gt; f1=4, f2=Name4<br>I2==&gt; f1=3, f2=Name3<br>I2==&gt; f1=4, f2=Name4<br>I2==&gt; f1=5, f2=Name5<br>I2==&gt; f1=6, f2=Name6<br>===================&gt; Iteration: 6<br>I1==&gt; f1=2, f2=Name2<br>I1==&gt; f1=3, f2=Name3<br>I1==&gt; f1=4, f2=Name4<br>I2==&gt; f1=3, f2=Name3<br>I2==&gt; f1=4, f2=Name4<br>I2==&gt; f1=5, f2=Name5<br>I2==&gt; f1=6, f2=Name6<br>===================&gt; Iteration: 7<br>I1==&gt; f1=2, f2=Name2<br>I1==&gt; f1=3, f2=Name3<br>I1==&gt; f1=4, f2=Name4<br>I2==&gt; f1=3, f2=Name3<br>I2==&gt; f1=4, f2=Name4<br>I2==&gt; f1=5, f2=Name5<br>I2==&gt; f1=6, f2=Name6<br>===================&gt; Iteration: 8<br>I1==&gt; f1=2, f2=Name2<br>I1==&gt; f1=3, f2=Name3<br>I1==&gt; f1=4, f2=Name4<br>I2==&gt; f1=3, f2=Name3<br>I2==&gt; f1=4, f2=Name4<br>I2==&gt; f1=5, f2=Name5<br>I2==&gt; f1=6, f2=Name6<br>===================&gt; Iteration: 9<br>I1==&gt; f1=2, f2=Name2<br>I1==&gt; f1=3, f2=Name3<br>I1==&gt; f1=4, f2=Name4<br>I2==&gt; f1=3, f2=Name3<br>I2==&gt; f1=4, f2=Name4<br>I2==&gt; f1=5, f2=Name5<br>I2==&gt; f1=6, f2=Name6<br>===================&gt; Iteration: 10<br>I1==&gt; f1=2, f2=Name2<br>I1==&gt; f1=3, f2=Name3<br>I1==&gt; f1=4, f2=Name4<br>I2==&gt; f1=3, f2=Name3<br>I2==&gt; f1=4, f2=Name4<br>I2==&gt; f1=5, f2=Name5<br>I2==&gt; f1=6, f2=Name6<br><br><br><br><br><br><br><br><br>
</pre>
  <hr width="100%">

  <center>
    <a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a><a href="home.htm">Go Home</a>
  </center>

  <p>Copyright &copy; 1996-2009, Sergei Kuchin, email: <a href="mailto:skuchin@aceweb.com">skuchin@aceweb.com</a>, <a href="mailto:skuchin@gmail.com">skuchin@gmail.com <script language="JavaScript" type="text/javascript">
<!-- hide from old browsers
  var modDate = new Date(document.lastModified)
  document.write("<i> Last Updated:<\/i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
  //-->
  </script></a>.</p>

  <p><i>Permission to use, copy, modify and redistribute this document for any purpose is hereby granted without fee, provided that the above copyright notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</i></p><script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script><script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
  pageTracker._trackPageview();
  </script>
</body>
</html>
